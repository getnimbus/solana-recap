{"version":3,"mappings":"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","names":["mobulaSocket","isMobulaReady","cbMobulaList","initWS","cb","cbItem","decodeEvent","ev","error","cached","chainSupport","authKey","handleFormatBlockChainId","chain","priceMobulaSubscribe","data","key","realtimePrice","n","item","res","TokenDetailAVGCostDistributionSupported","ctx","insert","target","div1","anchor","append","div0","t4_value","div","span","current","dirty","set_data","t4","t2_value","t2","tooltipnumber_changes","src_url_equal","img","img_src_value","detectedChain","attr","a","a_href_value","linkExplorer","td","show_if_2","show_if_1","t5_value","dayjs","listSupported","func","show_if_4","show_if_3","func_1","tr","td0","td1","td2","div2","td3","div3","td4","div4","t5","getNextBarTime","resolution","time","date","utcDate","supportedResolutions","lastBarsCache","sockets","Datafeed","baseAsset","typeWallet","symbol","tokenPairInfo","callback","symbolName","onResolve","price","params","symbolInfo","periodParams","onResult","nimbus","result","axios","e","index","onRealtimeCallback","subscriberUID","onResetCacheNeededCallback","socket","event","eventData","timestamp","lastDailyBar","nextDailyBarTime","bar","startDate","endDate","onDataCallback","overrides","isWhiteMode","TRADING_VIEW_DEFAULTS","widgetOptionsDefault","ENABLED_FEATURES","DISABLED_FEATURES","show_if","t1_value","input","t1","t_1_value","t_1","chartContainer","$$value","create_if_block_10","div0_class_value","null_to_empty","t0","t0_value","i","each_blocks","create_if_block_8","timeFrame","if_block0","create_if_block_6","if_block1","create_if_block_2","create_if_block_5","echart_changes","if_block","LogoWhite","Logo","create_if_block_7","selectedTypeChart","type","$queryTokenPrice","dataPriceChart","selectedTimeFrame","create_if_block_3","t7_value","t9_value","t11_value","t14_value","div3_style_value","div8","div8_style_value","div11","div10","div9","div5","div6","div7","t7","t9","t11","t14","triggerExportCSV","pricechart_changes","iframe","iframe_src_value","div_class_value","TrendUp","TrendDown","create_if_block_11","span1","span0","filterAvgCostType","balanceavgcostchart_changes","th","tbody","tokenhistoryitem_changes","t10_value","t16_value","t18_value","create_if_block_15","shorterAddress","create_if_block","func_2","func_3","div10_class_value","div12","table","thead","th0","th1","th2","th3","th4","overviewcard0_changes","overviewcard1_changes","overviewcard2_changes","overviewcard3_changes","overviewcard4_changes","overviewcard5_changes","historycsvexport_changes","t10","t12","t12_value","t16","t18","filterType","value","typeClosedHoldingTokenChart","create_if_block_4","shorterName","defaultToken","span2","image_changes","if_block2","if_block4","copytoclipboard_changes","tooltip_changes","svg","path0","path1","path","create_if_block_1","is_function","t3_value","div1_class_value","div4_class_value","t3","$$invalidate","showSideTokenDetail","selectedTokenDetail","isShowTooltipName","mouseleave_handler","isShowTooltipSymbol","mouseleave_handler_1","isShowTooltipContractAddress","mouseleave_handler_2","isCopied","wait","t15_value","div7_class_value","div19","div18","div14","div13","div17","div15","div16","t15","tooltipnumber3_changes","tooltipnumber4_changes","UpArrow"],"ignoreList":[],"sources":["../../src/lib/price-mobulaWs.ts","../../src/UI/TokenDetail/utils.ts","../../src/UI/TokenDetail/TokenHistoryItem.svelte","../../src/lib/trading-view/utils/stream.ts","../../src/lib/trading-view/utils/index.ts","../../src/lib/trading-view/theme.ts","../../src/lib/trading-view/model.ts","../../src/lib/trading-view/helper.ts","../../src/lib/trading-view/constant.ts","../../src/UI/TokenDetail/TradingViewChart.svelte","../../src/UI/TokenDetail/PriceChart.svelte","../../src/UI/TokenDetail/BalanceAvgCostChart.svelte","../../src/UI/TokenDetail/HistoryCSVExport.svelte","../../src/UI/TokenDetail/TokenDetailSidebar.svelte","../../src/UI/Profile/InviterQR.svelte","../../src/UI/Profile/ClosedPositionChart.svelte","../../src/UI/Profile/TopProfitAndLoss.svelte","../../src/UI/Profile/ProfitData.svelte","../../src/assets/up-arrow.svg"],"sourcesContent":["import { realtimePrice } from \"~/store\";\n\ntype iFN = () => void;\n\nexport let mobulaSocket: null | WebSocket;\nlet isMobulaReady = false;\nlet cbMobulaList: iFN[] = [];\n\nexport const initWS = (cb?: () => void) => {\n  mobulaSocket = new WebSocket(\"wss://general-api-wss-fgpupeioaa-uc.a.run.app\");\n\n  mobulaSocket.onopen = () => {\n    console.log(\"Mobula WS connection established\");\n    cb && cb();\n    isMobulaReady = true;\n    cbMobulaList.forEach((cbItem) => {\n      cbItem();\n    });\n    cbMobulaList = [];\n  };\n};\n\nexport const disconnectWs = () => {\n  if (mobulaSocket) {\n    mobulaSocket.close();\n  }\n};\n\nexport const decodeEvent = (ev: MessageEvent) => {\n  try {\n    const data = JSON.parse(ev.data);\n\n    return data;\n  } catch (error) {\n    console.log(ev.data);\n    console.log(error);\n    return null;\n  }\n};\n\nconst cached = {};\n\nexport const chainSupport = [\n  \"FTM\", //Fantom\n  \"XDAI\", // Gnosis\n  \"AVAX\", // Avalanche\n  \"CRONOS\", // Cronos\n  \"ETH\", // Ethereum\n  \"MATIC\", // Polygon\n  \"BNB\", // BNB\n  \"KLAY\", // Klaytn\n  \"AURA\", // Aurora\n  \"ARB\", // Arbitrum\n  \"OP\", // Optimistic\n  \"BASE\", // Base\n  \"SUI\", // Sui\n  \"MANTLE\", // Mantle\n];\n\nconst authKey =\n  import.meta.env.VITE_MOBULA_KEY || \"fe18f8be-644a-45a8-ad05-b088a5e61764\";\n\nexport const handleFormatBlockChainId = (chain: string) => {\n  switch (chain) {\n    case \"ETH\": // Ethereum\n      return \"1\";\n    case \"XDAI\": // XDAI\n      return \"100\";\n    case \"AVAX\": // Avalanche C-Chain\n      return \"43114\";\n    case \"CRONOS\": // Cronos\n      return \"25\";\n    case \"MATIC\": // Polygon\n      return \"137\";\n    case \"BNB\": // BNB Smart Chain (BEP20)\n      return \"56\";\n    case \"KLAY\": // Klaytn\n      return \"8217\";\n    case \"AURORA\": // AURORA\n      return \"1313161554\";\n    case \"ARB\": // Arbitrum\n      return \"42161\";\n    case \"OP\": // Optimistic\n      return \"10\";\n    case \"BASE\": // Base\n      return \"8453\";\n    case \"MANTLE\": // Mantle\n      return \"5000\";\n    case \"MOVR\": // Moonriver\n      return \"1285\";\n    case \"GLMR\": // Moonbeam\n      return \"1284\";\n    case \"ZETA\": // ZetaChain\n      return \"7000\";\n    case \"ONE\": // Harmony\n      return \"1666600000\";\n    case \"FANTOM\": // Fantom\n      return \"250\";\n    case \"ROSE\": // Oasis\n      return \"42262\";\n    case \"SUI\": // SUI\n      return \"sui\";\n    case \"SOL\": // Solana\n      return \"solana\";\n    case \"TON\":\n      return \"TON\";\n    case \"NEAR\":\n      return \"NEAR\";\n    default:\n      return \"\";\n  }\n};\n\nexport const priceMobulaSubscribe = (\n  data: string[] | number[],\n  chain: string\n) => {\n  try {\n    if (!mobulaSocket) {\n      console.log(\"Mobula WS is not initiated\");\n      initWS(() => priceMobulaSubscribe(data, chain));\n    } else {\n      if (!isMobulaReady) {\n        console.log(\"Delay Mobula Subscribe\");\n        cbMobulaList.push(() => priceMobulaSubscribe(data, chain));\n        return;\n      }\n\n      const key = `${data}-${chain}`;\n\n      if (cached[key]) {\n        realtimePrice.update((n) => (n = cached[key]));\n      } else {\n        if (chain === \"CEX\") {\n          mobulaSocket.send(\n            JSON.stringify({\n              type: \"market\",\n              authorization: authKey,\n              payload: {\n                assets: data.map((item) => {\n                  return {\n                    symbol: item,\n                  };\n                }),\n                interval: 15,\n              },\n            })\n          );\n        }\n\n        if (chain !== \"CEX\" && chainSupport.includes(chain)) {\n          mobulaSocket.send(\n            JSON.stringify({\n              type: \"market\",\n              authorization: authKey,\n              payload: {\n                assets: data.map((item) => {\n                  return {\n                    address: item,\n                    blockchain: handleFormatBlockChainId(chain),\n                  };\n                }),\n                interval: 15,\n              },\n            })\n          );\n        }\n      }\n\n      mobulaSocket.addEventListener(\"message\", (ev) => {\n        const res = decodeEvent(ev);\n        if (res?.data && Object.keys(res?.data).length !== 0) {\n          Object.keys(res?.data).forEach((key) => {\n            if (\n              res?.data[key]?.liquidity < 1000 ||\n              res?.data[key]?.price > 500000\n            ) {\n              delete res?.data[key];\n            }\n          });\n\n          realtimePrice.update((n) => (n = res?.data));\n        }\n      });\n    }\n  } catch (error) {\n    console.error(\"Socket error\", error);\n  }\n};\n","export const TokenDetailAVGCostDistributionSupported = [\n  //   \"EVM\",\n  \"TON\",\n  \"BUNDLE\",\n  \"MOVE\",\n  \"SUI\",\n];\n","<script lang=\"ts\">\n  import { isDarkMode, typeWallet, wallet, chain } from \"~/store\";\n  import { detectedChain, linkExplorer, listSupported } from \"~/lib/chains\";\n  import dayjs from \"dayjs\";\n  import \"dayjs/locale/en\";\n  import \"dayjs/locale/vi\";\n  import relativeTime from \"dayjs/plugin/relativeTime\";\n  dayjs.extend(relativeTime);\n\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import { getOverview, handleValidateAddress } from \"~/lib/queryAPI\";\n\n  export let data;\n  export let contractAddress;\n\n  $: costBuy = Number(data?.quantity_in) * Number(data?.from_price);\n  $: costSell = Number(data?.quantity_out) * Number(data?.to_price);\n\n  $: queryValidate = createQuery({\n    queryKey: [\"validate\", $wallet],\n    queryFn: () => handleValidateAddress($wallet),\n    retry: false,\n    enabled: Boolean($wallet && $wallet?.length !== 0),\n  });\n\n  $: queryOverview = createQuery({\n    queryKey: [\"overview\", $wallet, $chain],\n    queryFn: () => getOverview($wallet, $chain, $queryValidate.data),\n    enabled: Boolean($wallet && $wallet?.length !== 0),\n  });\n\n  $: costGainInSui =\n    (data?.to_token_address?.toLowerCase() === contractAddress?.toLowerCase()\n      ? costBuy\n      : costSell) / Number(data.native_price);\n\n  $: isBuy =\n    data?.to_token_address?.toLowerCase() === contractAddress?.toLowerCase();\n\n  $: amount = isBuy ? Number(data?.quantity_out) : Number(data?.quantity_in);\n\n  $: withinLast24Hours = dayjs().diff(dayjs(data?.created_at * 1000), \"hour\");\n</script>\n\n<tr class=\"group transition-all\">\n  <td\n    class={`pl-3 py-3 xl:static xl:bg-transparent sticky left-0 z-10 w-[100px] ${\n      $isDarkMode\n        ? \"bg-[#131313] group-hover:bg-[#000]\"\n        : \"bg-white group-hover:bg-gray-100\"\n    }`}\n  >\n    <div class=\"text-sm font-medium flex justify-start\">\n      {#if data?.to_token_address?.toLowerCase() === contractAddress?.toLowerCase()}\n        <div class=\"flex items-center text-[#00A878]\">\n          <div>+</div>\n          <TooltipNumber number={amount} type=\"balance\" />\n        </div>\n      {:else}\n        <div class=\"flex items-center text-red-500\">\n          <div>-</div>\n          <TooltipNumber number={amount} type=\"balance\" />\n        </div>\n      {/if}\n    </div>\n  </td>\n\n  <td\n    class={`py-3 ${\n      $isDarkMode ? \"group-hover:bg-[#000]\" : \"group-hover:bg-gray-100\"\n    }`}\n  >\n    <div class=\"text-sm font-medium flex justify-end\">\n      {#if data?.to_token_address?.toLowerCase() === contractAddress?.toLowerCase()}\n        <div class=\"text_00000099\">\n          <TooltipNumber number={costBuy} type=\"value\" /> (<TooltipNumber\n            number={costGainInSui}\n            type=\"amount\"\n          />\n          {$queryOverview?.data?.nativeToken?.symbol || \"N/A\"})\n        </div>\n      {:else}\n        <div class=\" text-red-500\">\n          <span>-</span>\n          <TooltipNumber number={costSell} type=\"value\" /> (<TooltipNumber\n            number={costGainInSui}\n            type=\"amount\"\n          />\n          {$queryOverview?.data?.nativeToken?.symbol || \"N/A\"})\n        </div>\n      {/if}\n    </div>\n  </td>\n\n  <td\n    class={`py-3 ${\n      $isDarkMode ? \"group-hover:bg-[#000]\" : \"group-hover:bg-gray-100\"\n    }`}\n  >\n    <div class=\"text-sm text_00000099 font-medium flex justify-end\">\n      {#if data?.to_token_address?.toLowerCase() === contractAddress?.toLowerCase()}\n        {#if data?.to_price < 1}\n          $<TooltipNumber number={data?.to_price} type=\"balance\" />\n        {:else}\n          <TooltipNumber number={data?.to_price} type=\"value\" />\n        {/if}\n      {/if}\n\n      {#if data?.to_token_address?.toLowerCase() !== contractAddress?.toLowerCase()}\n        {#if data?.from_price < 1}\n          $<TooltipNumber number={data?.from_price} type=\"balance\" />\n        {:else}\n          <TooltipNumber number={data?.from_price} type=\"value\" />\n        {/if}\n      {/if}\n    </div>\n  </td>\n\n  <td\n    class={`py-3 ${\n      $isDarkMode ? \"group-hover:bg-[#000]\" : \"group-hover:bg-gray-100\"\n    }`}\n  >\n    <div class=\"text-sm text_00000099 font-medium text-right flex justify-end\">\n      {#if data?.fee < 1}\n        $<TooltipNumber number={data?.fee} type=\"balance\" />\n      {:else}\n        <TooltipNumber number={data?.fee} type=\"value\" />\n      {/if}\n    </div>\n  </td>\n\n  <td\n    class={`py-3 ${\n      listSupported.filter((item) => item !== \"CEX\").includes($typeWallet) &&\n      data.chain !== \"CEX\"\n        ? \"\"\n        : \"pr-3\"\n    } ${$isDarkMode ? \"group-hover:bg-[#000]\" : \"group-hover:bg-gray-100\"}`}\n  >\n    <div class=\"text-sm text_00000099 font-medium text-right\">\n      {withinLast24Hours < 24\n        ? dayjs(data?.created_at * 1000).fromNow()\n        : dayjs(data?.created_at * 1000).format(\"YYYY-MM-DD\")}\n    </div>\n  </td>\n\n  {#if listSupported\n    .filter((item) => item !== \"CEX\")\n    .includes($typeWallet) && data.chain !== \"CEX\"}\n    <td\n      class={`py-3 w-10 ${\n        $isDarkMode ? \"group-hover:bg-[#000]\" : \"group-hover:bg-gray-100\"\n      }`}\n    >\n      <div class=\"flex items-center justify-center\">\n        <a\n          href={data.transaction_hash\n            ? linkExplorer(data.chain, data.transaction_hash).trx\n            : \"\"}\n          target=\"_blank\"\n          class=\"cursor-pointer\"\n        >\n          <img\n            src={detectedChain(data?.chain)?.logo}\n            alt=\"\"\n            width=\"22\"\n            height=\"22\"\n            class=\"rounded-full block\"\n          />\n        </a>\n      </div>\n    </td>\n  {/if}\n</tr>\n\n<style>\n</style>\n","export const getNextBarTime = (resolution: string, time: number) => {\n  const date = new Date(time);\n  const utcDate = new Date(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDate(),\n    date.getHours(),\n    date.getMinutes()\n  );\n\n  switch (resolution) {\n    case \"1\":\n    case \"3\":\n    case \"5\":\n    case \"15\":\n      utcDate.setMinutes(utcDate.getMinutes() + 1);\n      break;\n    case \"60\":\n    case \"120\":\n    case \"240\":\n    case \"360\":\n    case \"720\":\n    case \"D\":\n      utcDate.setHours(utcDate.getHours() + 1);\n      break;\n    case \"W\":\n      utcDate.setDate(utcDate.getDate() + 7);\n      break;\n    case \"M\":\n      utcDate.setMonth(utcDate.getMonth() + 1);\n      break;\n  }\n\n  return Math.floor(utcDate.getTime());\n};","import { nimbus } from \"~/lib/network\";\nimport { getNextBarTime } from \"./stream\";\nimport axios from \"axios\";\n\nexport const supportedResolutions = [\n  \"1\",\n  \"5\",\n  \"15\",\n  \"60\",\n  \"120\",\n  \"240\",\n  \"24H\",\n  \"7D\",\n  \"30D\",\n];\n\nconst lastBarsCache = new Map();\nconst sockets = new Map();\n\nexport const Datafeed = (\n  baseAsset: any,\n  typeWallet: string,\n  symbol: string,\n  tokenPairInfo?: any\n) => ({\n  onReady: (callback: Function) => {\n    callback({ supported_resolutions: supportedResolutions, supports_marks: true });\n  },\n  resolveSymbol: (symbolName: string, onResolve: Function) => {\n    const price = baseAsset?.price;\n\n    const params = {\n      name: symbolName,\n      description: \"\",\n      type: \"crypto\",\n      session: \"24x7\",\n      ticker: symbolName,\n      minmov: 1,\n      pricescale: Math.min(\n        10 ** String(Math.round(10000 / price)).length,\n        10000000000000000\n      ),\n      has_intraday: true,\n      intraday_multipliers: [\"1\", \"15\", \"30\", \"60\"],\n      supported_resolution: supportedResolutions,\n      volume_precision: 8,\n      data_status: \"streaming\",\n    };\n    onResolve(params);\n  },\n  getBars: async (\n    symbolInfo: any,\n    resolution: string,\n    periodParams: any,\n    onResult: Function\n  ) => {\n    if (typeWallet === \"SOL\") {\n      const data: any = await nimbus.get(`/token/market/chart-history?chain=${typeWallet}&symbol=${symbol}&address=${baseAsset.address === \"11111111111111111111111111111111\" ? \"So11111111111111111111111111111111111111112\" : baseAsset.address}&resolution=${resolution}&from=${periodParams.from}&to=${periodParams.to}`).then((res: any) => res.data);\n      onResult(data, {\n        noData: data.length !== periodParams.countBack,\n      });\n\n      if (periodParams.firstDataRequest) {\n        lastBarsCache.set(baseAsset?.name, data[data.length - 1]);\n      }\n    } else if (typeWallet === \"TON\") {\n      if (tokenPairInfo) {\n        const result = await axios.get(`https://dyor.io/api/tradingview/${tokenPairInfo.id}/history`, {\n          params: {\n            symbol: tokenPairInfo.pairSymbol,\n            resolution,\n            from: periodParams.from,\n            to: periodParams.to,\n            countback: Number(periodParams.countBack),\n            currencyCode: tokenPairInfo.pairSymbol\n          }\n        }).then((res) => res.data).catch((e) => {\n          console.error(e);\n        })\n\n        if (result !== undefined) {\n          const data = result?.o?.map((item: any, index: number) => {\n            return {\n              close: Number(result?.c[index] || 0),\n              high: Number(result?.h[index] || 0),\n              low: Number(result?.l[index] || 0),\n              open: Number(item || 0),\n              time: Number(result?.t[index] || 0) * 1000,\n              volume: Number(result?.v[index] || 0),\n              isBarClosed: index === result?.c.length - 1 ? false : true,\n              isLastBar: index === result?.o.length - 1 ? true : false,\n            }\n          }) || []\n\n\n          onResult(data, {\n            noData: data.length === 0 || data.length !== periodParams.countBack,\n          });\n\n          if (periodParams.firstDataRequest) {\n            lastBarsCache.set(symbol, data[data?.length - 1]);\n          }\n        } else {\n          onResult([], {\n            noData: true,\n          });\n        }\n      } else {\n        onResult([], {\n          noData: true,\n        });\n      }\n    } else {\n      const params = {\n        from: periodParams.from * 1000,\n        to: periodParams.to * 1000,\n        amount: periodParams.countBack,\n        period: resolution,\n        address: baseAsset?.address,\n        usd: true\n      };\n\n      const data: any = await axios.get(\"https://api.mobula.io/api/1/market/history/pair\", {\n        params: {\n          ...params\n        },\n        headers: { Authorization: \"eb66b1f3-c24b-4f43-9892-dbc5f37d5a6d\" },\n      }).then((res) => res.data).catch((e) => console.error(e));\n\n      if (data) {\n        onResult(data?.data, {\n          noData: data?.data?.length !== periodParams.countBack,\n        });\n\n        if (periodParams.firstDataRequest) {\n          lastBarsCache.set(baseAsset?.name, data?.data[data?.data?.length - 1]);\n        }\n      } else {\n         onResult([], {\n          noData: true,\n        });\n      }\n    }\n  },\n  searchSymbols: () => { },\n  subscribeBars: (\n    symbolInfo,\n    resolution,\n    onRealtimeCallback,\n    subscriberUID,\n    onResetCacheNeededCallback\n  ) => {\n    console.log(\"Subscribinnnng\");\n    const socket = new WebSocket(\n      \"wss://general-api-wss-fgpupeioaa-uc.a.run.app\" as string\n    );\n    const authKey =\n      import.meta.env.VITE_MOBULA_KEY || \"fe18f8be-644a-45a8-ad05-b088a5e61764\";\n    const params = {\n      interval: 5,\n      address: baseAsset?.address\n    };\n\n    socket.addEventListener(\"open\", () => {\n      socket.send(\n        JSON.stringify({\n          type: \"pair\",\n          authorization: authKey,\n          payload: params,\n        })\n      );\n    });\n\n    socket.addEventListener(\"message\", (event) => {\n      const eventData = JSON.parse(event.data);\n      const { data } = eventData;\n      if (data) {\n        const { priceUSD: price, date: timestamp } = data;\n\n        const lastDailyBar = lastBarsCache.get(baseAsset?.name);\n        const nextDailyBarTime = getNextBarTime(resolution, lastDailyBar.time);\n        let bar: any;\n\n        if (timestamp >= nextDailyBarTime) {\n          bar = {\n            time: nextDailyBarTime,\n            open: lastDailyBar.close,\n            high: price,\n            low: price,\n            close: price,\n          };\n        } else {\n          bar = {\n            ...lastDailyBar,\n            high: Math.max(lastDailyBar.high, price),\n            low: Math.min(lastDailyBar.low, price),\n            close: price,\n          };\n        }\n\n        onRealtimeCallback(bar);\n      }\n    });\n\n    console.log(\"Subscribe\", baseAsset?.name + \"-\" + subscriberUID);\n    sockets.set(baseAsset?.name + \"-\" + subscriberUID, socket);\n  },\n  unsubscribeBars: (subscriberUID) => {\n    console.log(\"Unsubscribe\", baseAsset?.name + \"-\" + subscriberUID);\n    sockets.get(baseAsset?.name + \"-\" + subscriberUID).close();\n  },\n  getMarks: (symbolInfo, startDate, endDate, onDataCallback, resolution) => {\n  },\n  getTimeScaleMarks: () => ({}),\n  getServerTime: () => ({}),\n});","export const overrides = (isWhiteMode: boolean) => ({\n  \"paneProperties.vertGridProperties.color\": isWhiteMode\n    ? \"#0D0D0D08\"\n    : \"rgba(255, 255, 255, 0.03)\",\n  \"paneProperties.horzGridProperties.color\": isWhiteMode\n    ? \"#0D0D0D08\"\n    : \"rgba(255, 255, 255, 0.03)\",\n  \"symbolWatermarkProperties.transparency\": 90,\n  \"scalesProperties.textColor\": isWhiteMode\n    ? \"rgba(0,0,0,0.8)\"\n    : \"rgba(255,255,255,0.8)\",\n  \"mainSeriesProperties.candleStyle.wickUpColor\": \"#0ECB81\",\n  \"mainSeriesProperties.candleStyle.width\": \"190px\",\n  \"mainSeriesProperties.candleStyle.wickDownColor\": \"#ea3943\",\n  \"mainSeriesProperties.candleStyle.upColor\": \"#0ECB81\",\n  \"mainSeriesProperties.candleStyle.downColor\": \"#ea3943\",\n  \"paneProperties.background\": isWhiteMode\n    ? \"#ffffff\"\n    : \"#0f0f0f\",\n  \"paneProperties.backgroundType\": \"solid\",\n  \"scalesProperties.backgroundColor\": isWhiteMode\n    ? \"#ffffff\"\n    : \"#0f0f0f\",\n  \"paneProperties.legendProperties.showStudyArguments\": true,\n  \"paneProperties.legendProperties.showStudyTitles\": true,\n  \"paneProperties.legendProperties.showStudyValues\": true,\n  \"paneProperties.legendProperties.showSeriesTitle\": true,\n  \"paneProperties.legendProperties.showSeriesOHLC\": true,\n  \"paneProperties.legendProperties.showLegend\": true,\n  \"paneProperties.legendProperties.showBarChange\": true,\n  \"paneProperties.legendProperties.showBackground\": true,\n  \"mainSeriesProperties.hollowCandleStyle.drawWick\": true,\n  \"mainSeriesProperties.hollowCandleStyle.drawBorder\": true,\n  \"mainSeriesProperties.candleStyle.drawBorder\": true,\n  \"mainSeriesProperties.haStyle.drawWick\": true,\n  \"mainSeriesProperties.haStyle.drawBorder\": true,\n  \"paneProperties.legendProperties.backgroundTransparency\": 50,\n});","export enum TRADING_VIEW_DEFAULTS {\n  LIBRARY_PATH = \"/static/charting_library/\",\n  CHARTS_STORAGE_URL = \"https://saveload.tradingview.com\",\n  CHARTS_STORAGE_API_VERSION = \"1.1\",\n  CLIENT_ID = \"tradingview.com\",\n  USER_ID = \"public_user_id\",\n  CONTAINER_ID_SPOT = \"tv_chart_container\",\n  INTERVAL = \"1h\",\n  CUSTOM_CSS = \"../themed.css\",\n}","\nimport type { AvailableSaveloadVersions, ResolutionString } from \"../../../public/static/charting_library\";\nimport { TRADING_VIEW_DEFAULTS } from \"./model\";\n\n\nexport const widgetOptionsDefault = {\n  interval: TRADING_VIEW_DEFAULTS.INTERVAL as ResolutionString,\n  library_path: TRADING_VIEW_DEFAULTS.LIBRARY_PATH as string,\n  charts_storage_url: TRADING_VIEW_DEFAULTS.CHARTS_STORAGE_URL as string,\n  charts_storage_api_version:\n    TRADING_VIEW_DEFAULTS.CHARTS_STORAGE_API_VERSION as AvailableSaveloadVersions,\n  client_id: TRADING_VIEW_DEFAULTS.CLIENT_ID as string,\n  user_id: TRADING_VIEW_DEFAULTS.USER_ID as string,\n  custom_css_url: TRADING_VIEW_DEFAULTS.CUSTOM_CSS as string,\n};","export const ENABLED_FEATURES = [\n  \"save_chart_properties_to_local_storage\",\n  \"two_character_bar_marks_labels\",\n  \"items_favoriting\",\n  // \"hide_last_na_study_output\",\n  // \"dont_show_boolean_study_arguments\",\n];\n\nexport const DISABLED_FEATURES = [\n  // \"header_widget\",\n  // \"header_saveload\",\n  // \"header_symbol_search_hot_key\",\n  // \"header_interval_dropdown\",\n  // \"header_undo_redo\",\n  // \"header_screenshot\",\n  // \"header_settings\",\n  // \"header_fullscreen_button\",\n  // \"header_indicators\",\n  // \"header_interval_dialog_button\",\n  \"header_compare\",\n  // \"header_chart_type\",\n  \"use_localstorage_for_settings\",\n  \"header_symbol_search\",\n  \"symbol_info\",\n  \"volume_force_overlay\",\n  \"show_interval_dialog_on_key_press\",\n  \"symbol_search_hot_key\",\n  \"display_market_status\",\n  \"compare_symbol\",\n  // \"border_around_the_chart\",\n  // \"remove_library_container_border\",\n];","<script lang=\"ts\">\n  import { isNimbusVersion } from \"~/utils/constants\";\n  import { Datafeed } from \"~/lib/trading-view/utils\";\n  import { overrides } from \"~/lib/trading-view/theme\";\n  import { widgetOptionsDefault } from \"~/lib/trading-view/helper\";\n  import {\n    DISABLED_FEATURES,\n    ENABLED_FEATURES,\n  } from \"~/lib/trading-view/constant\";\n  import { isDarkMode, typeWallet } from \"~/store\";\n  import { handleFormatBlockChainId } from \"~/lib/price-mobulaWs\";\n  import { nimbus } from \"~/lib/network\";\n  import { formatBalance } from \"~/utils/index\";\n  import { groupBy } from \"lodash\";\n  import { t } from \"~/lib/i18n\";\n\n  import Loading from \"~/components/Loading.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n\n  export let id: string;\n  export let mobile: boolean = false;\n  export let contractAddress;\n  export let price;\n  export let chain;\n  export let sellHistoryTradeList;\n  export let buyHistoryTradeList;\n  export let selectedTypeChart;\n  export let avgCost;\n\n  const nativeTokenList = [\n    \"ETH\",\n    \"BTC\",\n    \"SUI\",\n    \"BNB\",\n    \"SOL\",\n    \"ADA\",\n    \"AVAX\",\n    \"DOT\",\n    \"MATIC\",\n    \"LINK\",\n    \"ALGO\",\n    \"XTZ\",\n    \"CRO\",\n    \"MNT\",\n    \"XZO\",\n    \"KLAY\",\n    \"AURA\",\n    \"VIC\",\n    \"TON\",\n    \"NEAR\",\n    \"ZETA\",\n    \"FTM\",\n    \"EVMOS\",\n    \"ONE\",\n    \"GLMR\",\n    \"METIS\",\n    \"RON\",\n    \"MOVR\",\n    \"CANTO\",\n    \"ROSE\",\n  ];\n\n  let CONTAINER_ID = \"\";\n  let chartContainer: any;\n  let baseAsset: any;\n  let isEmpty = false;\n  let isLoading = false;\n  let tvWidget: any;\n  let checked = true;\n\n  $: {\n    if (selectedTypeChart === \"candles\") {\n      if ($typeWallet === \"CEX\") {\n        if (chain === \"SOL\") {\n          baseAsset = {\n            name: id,\n            address: contractAddress,\n            price,\n            token0: id,\n            token1: \"USD\",\n          };\n        } else {\n          if (nativeTokenList.includes(id)) {\n            handleGetPairData(id === \"ETH\" ? \"ethereum\" : id);\n          } else {\n            handleGetPairData(contractAddress);\n          }\n        }\n      } else if ($typeWallet === \"SOL\") {\n        baseAsset = {\n          name: id,\n          address: contractAddress,\n          price,\n          token0: id,\n          token1: \"USD\",\n        };\n      } else {\n        if (chain === \"SOL\") {\n          baseAsset = {\n            name: id,\n            address: contractAddress,\n            price,\n            token0: id,\n            token1: \"USD\",\n          };\n        } else {\n          if (\n            contractAddress.includes(\"CEX-\") ||\n            [\"ALGO\", \"NEAR\", \"INJ\", \"MOVE\", \"BTC\"].includes($typeWallet)\n          ) {\n            baseAsset = {};\n          } else {\n            if (\n              contractAddress &&\n              contractAddress !== \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\n            ) {\n              if (nativeTokenList.includes(id)) {\n                handleGetPairData(id === \"ETH\" ? \"ethereum\" : id);\n              } else {\n                handleGetPairData(contractAddress);\n              }\n            } else {\n              handleGetPairData(id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const handleGetPairData = async (address: string) => {\n    isLoading = true;\n    try {\n      const blockchain = handleFormatBlockChainId(\n        $typeWallet === \"CEX\" ? id : chain,\n      );\n      if (blockchain) {\n        const params = {\n          address,\n          blockchain,\n        };\n        const response: any = await nimbus.get(\"/token/market-pairs/mobula\", {\n          params,\n        });\n        if (\n          response &&\n          response?.data &&\n          response?.data?.pairs &&\n          response?.data?.pairs?.length !== 0\n        ) {\n          baseAsset = {\n            name: id,\n            address: response?.data?.pairs[0]?.address,\n            price,\n            token0: response?.data?.pairs[0]?.token0?.symbol,\n            token1: response?.data?.pairs[0]?.token1?.symbol,\n          };\n        } else {\n          if (\n            $typeWallet === \"TON\" ||\n            ($typeWallet === \"BUNDLE\" && chain === \"TON\")\n          ) {\n            baseAsset = {\n              name: id,\n              address: contractAddress,\n              price,\n              token0: id,\n              token1: id,\n            };\n          } else {\n            isEmpty = true;\n          }\n        }\n      } else {\n        isEmpty = true;\n      }\n    } catch (error) {\n      isEmpty = true;\n      console.error(error);\n    } finally {\n      isLoading = false;\n    }\n  };\n\n  $: {\n    if (id) {\n      CONTAINER_ID = `svelte-tradingview-widget-${id};`;\n    }\n  }\n\n  const chartInit = async (isRenderTradeData: any) => {\n    if (!baseAsset) return () => {};\n\n    if (!chartContainer) {\n      return;\n    }\n\n    let options: any = {};\n\n    if (\n      $typeWallet === \"TON\" ||\n      ($typeWallet === \"BUNDLE\" && chain === \"TON\")\n    ) {\n      const tokenPairInfo =\n        (await nimbus\n          .get(`/token/market/chart-history?chain=TON&symbol=${id}`)\n          .then((res: any) => res.data)\n          .catch((e) => console.error(e))) || null;\n\n      const symbol = tokenPairInfo?.isWithTONPair\n        ? baseAsset?.token0 === id\n          ? baseAsset?.token0 + \"/\" + \"TON\"\n          : baseAsset?.token1 + \"/\" + \"TON\"\n        : baseAsset?.token0 === id\n          ? baseAsset?.token0 + \"/\" + \"USD\"\n          : baseAsset?.token1 + \"/\" + \"USD\";\n\n      options = {\n        datafeed: Datafeed(baseAsset, $typeWallet, id, tokenPairInfo),\n        symbol,\n      };\n    } else {\n      options = {\n        datafeed: Datafeed(baseAsset, $typeWallet, id),\n        symbol:\n          baseAsset?.token0 === id\n            ? baseAsset?.token0 + \"/\" + \"USD\"\n            : baseAsset?.token1 + \"/\" + \"USD\",\n      };\n    }\n\n    try {\n      import(\"../../../public/static/charting_library\")\n        .then(({ widget: Widget }) => {\n          tvWidget = new Widget({\n            ...options,\n            ...widgetOptionsDefault,\n            container: chartContainer,\n            container_id: CONTAINER_ID,\n            library_path: \"/static/charting_library/\",\n            locale: \"en\",\n            disabled_features: [\n              ...DISABLED_FEATURES,\n              ...(mobile ? [\"left_toolbar\"] : []),\n            ],\n            enabled_features: ENABLED_FEATURES,\n            charts_storage_url: \"https://saveload.tradingview.com\",\n            charts_storage_api_version: \"1.1\",\n            client_id: \"tradingview.com\",\n            user_id: \"public_user_id\",\n            fullscreen: false,\n            autosize: true,\n            theme: $isDarkMode ? \"Dark\" : \"Light\",\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone as any,\n            favorites: {\n              intervals: [\"60\", \"240\", \"1\", \"5\", \"1440\"],\n            },\n            studies_overrides: {\n              \"volume.volume.color.0\": \"#ea3943\",\n              \"volume.volume.color.1\": \"#0ECB81\",\n            },\n            interval: \"5\",\n          });\n\n          (window as any).tvWidget = tvWidget;\n\n          tvWidget.onChartReady(() => {\n            tvWidget.applyOverrides(overrides(!$isDarkMode) || {});\n\n            if (Number(avgCost) > 0) {\n              tvWidget.activeChart().createShape(\n                {\n                  time: 0,\n                  price: Number(avgCost || 0),\n                },\n                {\n                  shape: \"horizontal_line\",\n                  lock: true,\n                  text: \"Avg Cost\",\n                  overrides: {\n                    linewidth: 0.5,\n                    linecolor: \"#eab308\",\n                    showLabel: true,\n                    textcolor: \"#eab308\",\n                    horzLabelsAlign: \"right\",\n                  },\n                },\n              );\n            }\n\n            if (isRenderTradeData) {\n              handleRenderTradeData();\n            }\n          });\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  $: {\n    if (baseAsset || mobile || $isDarkMode) {\n      if (chartContainer) {\n        if ((window as any).tvWidget !== null) {\n          (window as any).tvWidget?.remove();\n          (window as any).tvWidget = null;\n        }\n\n        chartInit(true);\n      }\n    }\n  }\n\n  const handleRenderTradeData = () => {\n    const buyHistoryTradeCreatedList = groupBy(\n      buyHistoryTradeList,\n      \"created_at\",\n    );\n    const buyCreatedList = Object.getOwnPropertyNames(\n      buyHistoryTradeCreatedList,\n    );\n\n    const formatBuyTradeList = buyCreatedList?.map((item) => {\n      if (buyHistoryTradeCreatedList[item].length > 1) {\n        return {\n          created_at: item,\n          quantity_out: buyHistoryTradeCreatedList[item].reduce(\n            (prev, item) => prev + Number(item?.quantity_out),\n            0,\n          ),\n        };\n      }\n      return {\n        created_at: item,\n        quantity_out: Number(buyHistoryTradeCreatedList[item][0].quantity_out),\n      };\n    });\n\n    formatBuyTradeList\n      .filter((item) => Number(item?.quantity_out) > 0)\n      .forEach((item) => {\n        tvWidget\n          .activeChart()\n          .createExecutionShape()\n          .setText(`B ${formatBalance(Number(item?.quantity_out))}`)\n          .setFont(\"14pt Arial\")\n          .setArrowHeight(14)\n          .setTextColor(\"#00b580\")\n          .setArrowColor(\"#00b580\")\n          .setDirection(\"buy\")\n          .setTime(Number(item.created_at));\n      });\n\n    const sellHistoryTradeCreatedList = groupBy(\n      sellHistoryTradeList,\n      \"created_at\",\n    );\n\n    const sellCreatedList = Object.getOwnPropertyNames(\n      sellHistoryTradeCreatedList,\n    );\n\n    const formatSellTradeList = sellCreatedList?.map((item) => {\n      if (sellHistoryTradeCreatedList[item].length > 1) {\n        return {\n          created_at: item,\n          quantity_in: sellHistoryTradeCreatedList[item].reduce(\n            (prev, item) => prev + Number(item?.quantity_in),\n            0,\n          ),\n        };\n      }\n      return {\n        created_at: item,\n        quantity_in: Number(sellHistoryTradeCreatedList[item][0].quantity_in),\n      };\n    });\n\n    formatSellTradeList\n      .filter((item) => Number(item?.quantity_in) > 0)\n      .forEach((item) => {\n        tvWidget\n          .activeChart()\n          .createExecutionShape()\n          .setText(`S ${formatBalance(Number(item?.quantity_in))}`)\n          .setFont(\"14pt Arial\")\n          .setArrowHeight(14)\n          .setTextColor(\"#ef4444\")\n          .setArrowColor(\"#ef4444\")\n          .setDirection(\"sell\")\n          .setTime(Number(item?.created_at));\n      });\n  };\n\n  const toggleMarkTradeData = (e: any) => {\n    checked = !checked;\n    if (checked) {\n      tvWidget &&\n        tvWidget.onChartReady(() => {\n          handleRenderTradeData();\n        });\n    } else {\n      tvWidget &&\n        tvWidget.onChartReady(() => {\n          chartInit(false);\n        });\n    }\n  };\n</script>\n\n{#if isLoading}\n  <div class=\"flex justify-center items-center h-[485px]\">\n    {#if isNimbusVersion}\n      <LoadingPremium />\n    {:else}\n      <Loading />\n    {/if}\n  </div>\n{:else}\n  <div>\n    {#if isEmpty || contractAddress.includes(\"CEX-\") || [\"ALGO\", \"NEAR\", \"INJ\", \"MOVE\", \"BTC\"].includes($typeWallet)}\n      {#if contractAddress.includes(\"CEX-\") || [\"ALGO\", \"NEAR\", \"INJ\", \"MOVE\", \"BTC\"].includes($typeWallet)}\n        <div\n          class={`absolute top-0 left-0 rounded-[20px] w-full h-full flex flex-col items-center gap-3 pt-62 z-7 backdrop-blur-md ${\n            $isDarkMode ? \"bg-black/90\" : \"bg-white/95\"\n          }`}\n        >\n          <div class=\"text-lg\">{$t(\"Coming soon 🚀\")}</div>\n        </div>\n      {:else}\n        <div\n          class=\"flex justify-center items-center h-[485px] text-base text-gray-400\"\n        >\n          {$t(\"Empty\")}\n        </div>\n      {/if}\n    {:else}\n      <div class=\"flex flex-col gap-4 xl:justify-end xl:items-end xl:-mt-10\">\n        <div class=\"flex xl:justify-end justify-start items-center xl:mr-2\">\n          <div class=\"flex items-center justify-start gap-2\">\n            <input\n              type=\"checkbox\"\n              {checked}\n              on:change={toggleMarkTradeData}\n              class=\"cursor-pointer relative w-5 h-5 appearance-none rounded-[0.25rem] border outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca]\"\n            />\n            <div class=\"text-sm\">{$t(\"Display Trade History\")}</div>\n          </div>\n        </div>\n        <div\n          class=\"w-full h-[485px]\"\n          id={CONTAINER_ID}\n          bind:this={chartContainer}\n        />\n      </div>\n    {/if}\n  </div>\n{/if}\n\n<style>\n</style>\n","<script lang=\"ts\">\n  import dayjs from \"dayjs\";\n  import isBetween from \"dayjs/plugin/isBetween\";\n  dayjs.extend(isBetween);\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import { defillama, nimbus } from \"~/lib/network\";\n  import { isDarkMode, typeWallet } from \"~/store\";\n  import { autoFontSize, formatBalance, formatCurrency } from \"~/utils/index\";\n  import { timeFrame, isNimbusVersion } from \"~/utils/constants\";\n  import numeral from \"numeral\";\n  import { groupBy } from \"lodash\";\n  import { AnimateSharedLayout, Motion } from \"svelte-motion\";\n  import { handleFormatBlockChainId } from \"~/lib/price-mobulaWs\";\n  import { t } from \"~/lib/i18n\";\n\n  import TradingViewChart from \"~/UI/TokenDetail/TradingViewChart.svelte\";\n  import EChart from \"~/components/EChart.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import Loading from \"~/components/Loading.svelte\";\n\n  import Logo from \"~/assets/logo-1.svg\";\n  import LogoWhite from \"~/assets/logo-white.svg\";\n\n  export let contractAddress;\n  export let cgId: string | undefined;\n  export let sellHistoryTradeList;\n  export let buyHistoryTradeList;\n  export let id;\n  export let avgCost;\n  export let chain: string;\n  export let symbol;\n  export let price;\n\n  const listEVMNativeTokenSymbol = [\n    \"USDT\",\n    \"USDC\",\n    \"DAI\",\n    \"ETH\",\n    \"ARB\",\n    \"AVAX\",\n    \"AURORA\",\n    \"BASE\",\n    \"BLAST\",\n    \"BNB\",\n    \"CRO\",\n    \"FTM\",\n    \"GNO\",\n    \"TBA\",\n    \"MNT\",\n    \"METIS\",\n    \"OP\",\n    \"MATIC\",\n    \"RON\",\n    \"SCROLL\",\n    \"SMR\",\n    \"VIC\",\n    \"ZETA\",\n    \"ZK\",\n  ];\n\n  const typeChart = [\n    {\n      label: \"Candles\",\n      value: \"candles\",\n    },\n    {\n      label: \"Line\",\n      value: \"line\",\n    },\n  ];\n\n  let selectedTypeChart = \"candles\";\n\n  let selectedTimeFrame: \"7D\" | \"30D\" | \"3M\" | \"1Y\" | \"ALL\" = \"30D\";\n  let dataPriceChart: any = [];\n  let dataAvgCost: any = [];\n  let optionLine: any = {\n    tooltip: {\n      trigger: \"axis\",\n      extraCssText: \"z-index: 9997\",\n      formatter: function (params: any) {\n        const typeList = params[0].data?.data?.map((item: any) => {\n          if (item.type === \"sell\") {\n            return \"sell\";\n          } else if (item.type === \"buy\") {\n            return \"buy\";\n          }\n        });\n\n        const allTypeSell = typeList?.every((item: any) => item === \"sell\");\n        const allTypeBuy = typeList?.every((item: any) => item === \"buy\");\n\n        return `\n            <div style=\"display: flex; flex-direction: column; gap: 12px; min-width: 320px;\">\n              <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div style=\"font-weight: 500; font-size: 16px; line-height: 19px; color: ${\n                  $isDarkMode ? \"white\" : \"black\"\n                }\">\n                  ${dayjs(params[0].axisValue).format(\"YYYY-MM-DD HH:mm\")}\n                </div>\n                \n                ${\n                  params[0]?.seriesName === \"Buy\" ||\n                  params[0]?.seriesName === \"Sell\" ||\n                  params[0]?.seriesName === \"Trade\"\n                    ? `\n                  <div style=\"display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                    $isDarkMode ? \"white\" : \"black\"\n                  }\">\n                    <span>${params[0]?.marker}</span>\n                    <span>${\n                      allTypeSell\n                        ? `${$t(\"Sell\")} +${params[0].data?.data.length}`\n                        : allTypeBuy\n                          ? `${$t(\"Buy\")} +${params[0].data?.data.length}`\n                          : `${$t(params[0]?.seriesName)}`\n                    }</span>\n                  </div>\n                `\n                    : ``\n                }\n              </div>\n\n              ${params\n                .map((item: any) => {\n                  return `\n                    ${\n                      item?.seriesName === \"Trade\"\n                        ? handleTooltipTrade(item?.data)\n                        : item?.seriesName === \"Buy\" ||\n                            item?.seriesName === \"Sell\"\n                          ? handleTooltipBuyAndSell(item?.data)\n                          : `\n                        <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                          <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                            $isDarkMode ? \"white\" : \"black\"\n                          }\">\n                            <span>${item?.marker}</span>\n                            <span>${$t(item?.seriesName)}</span>\n                          </div>\n\n                          <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n                            <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                              $isDarkMode ? \"white\" : \"black\"\n                            }\">\n                              $${formatCurrency(Math.abs(item.value[1]))}\n                            </div>\n                          </div>\n                        </div>\n                      `\n                    }\n                  `;\n                })\n                .join(\"\")}\n            </div>`;\n      },\n    },\n    toolbox: {\n      right: \"3%\",\n      top: \"-1%\",\n      feature: {\n        dataZoom: {\n          yAxisIndex: \"none\",\n        },\n      },\n    },\n    grid: {\n      left: \"3%\",\n      right: \"4%\",\n      bottom: \"3%\",\n      containLabel: true,\n    },\n    xAxis: {\n      type: \"time\",\n      axisLabel: {\n        fontSize: autoFontSize(),\n      },\n    },\n    yAxis: {\n      type: \"value\",\n      position: \"right\",\n      axisLabel: {\n        formatter: function (value: any, index: any) {\n          if (value.toString().includes(\"e-\")) {\n            const numStr = value.toString();\n            const eIndex = numStr.indexOf(\"e\");\n            if (eIndex !== -1) {\n              const significand = parseFloat(\n                numStr\n                  .slice(0, 4)\n                  .split(\"\")\n                  .filter((e: any) => e != \".\")\n                  .join(\"\"),\n              );\n\n              return `${value < 0 ? \"-\" : \"\"} $` + `0.0...0${significand}`;\n            }\n          } else {\n            return (\n              `${value < 0 ? \"-\" : \"\"} $` +\n              numeral(Math.abs(value)).format(\"0.00a\")\n            );\n          }\n        },\n        fontSize: autoFontSize(),\n      },\n    },\n    series: [],\n  };\n  let time: any = 30;\n\n  $: {\n    switch (selectedTimeFrame) {\n      case \"ALL\":\n        time = \"ALL\";\n        break;\n      case \"7D\":\n        time = 7;\n        break;\n      case \"30D\":\n        time = 30;\n        break;\n      case \"3M\":\n        time = 90;\n        break;\n      case \"1Y\":\n        time = 365;\n        break;\n      default:\n        time = 30;\n    }\n  }\n\n  const handleGetTokenPrice = async () => {\n    if (chain === \"SOL\") {\n      const params = `solana:${contractAddress}`;\n\n      const response: any = await defillama.get(\n        `/chart/${params}?start=${dayjs()\n          .subtract(time === \"ALL\" ? 1825 : time, \"day\")\n          .unix()}&span=${\n          time === \"ALL\" ? 1825 : time\n        }&period=1d&searchWidth=600`,\n      );\n      const formatRes = response?.coins[`${params}`]?.prices.map(\n        (item: any) => {\n          return [Number(item.timestamp) * 1000, Number(item.price)];\n        },\n      );\n      return formatRes || [];\n    } else if (chain === \"SUI\" || $typeWallet === \"MOVE\") {\n      const from =\n        time === \"ALL\"\n          ? dayjs(\"01.01.2008\").valueOf()\n          : dayjs().subtract(time, \"day\").valueOf();\n      const to = dayjs().valueOf();\n\n      const response: any = await nimbus.get(\n        `/token/${contractAddress}/chart?chain=SUI&from=${from}&to=${to}`,\n      );\n      const formatRes = response?.data?.map((item: any) => {\n        return [Number(item.timestamp), Number(item.price)];\n      });\n      return formatRes || [];\n    } else {\n      let params: any = {\n        blockchain: \"\",\n        symbol: \"\",\n        asset: \"\",\n        from: null,\n      };\n\n      if (chain === \"CEX\") {\n        params = {\n          blockchain: handleFormatBlockChainId(symbol),\n          symbol,\n          asset: \"\",\n          from: time === \"ALL\" ? \"\" : dayjs().subtract(time, \"day\").valueOf(),\n        };\n      }\n\n      if (chain !== \"CEX\") {\n        if (contractAddress) {\n          params = {\n            blockchain: handleFormatBlockChainId(chain),\n            symbol: \"\",\n            asset:\n              contractAddress === \"TONCOIN\"\n                ? \"EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c\"\n                : contractAddress,\n            from: time === \"ALL\" ? \"\" : dayjs().subtract(time, \"day\").valueOf(),\n          };\n        } else {\n          params = {\n            blockchain: handleFormatBlockChainId(chain),\n            symbol,\n            asset: \"\",\n            from: time === \"ALL\" ? \"\" : dayjs().subtract(time, \"day\").valueOf(),\n          };\n        }\n      }\n\n      const response: any = await nimbus.get(\"/token/price/mobula\", {\n        params,\n      });\n\n      return response?.data || [];\n    }\n  };\n\n  $: queryTokenPrice = createQuery({\n    queryKey: [\"token-price\", contractAddress, symbol, cgId, chain, time],\n    queryFn: () => handleGetTokenPrice(),\n    retry: false,\n    enabled:\n      Boolean(contractAddress || symbol || cgId || chain || time) &&\n      selectedTypeChart === \"line\" &&\n      [\"BUNDLE\", \"CEX\", \"EVM\", \"SOL\", \"TON\", \"MOVE\", \"NEAR\"].includes(\n        $typeWallet,\n      ),\n  });\n\n  $: {\n    if (\n      !$queryTokenPrice.isError &&\n      $queryTokenPrice.data !== undefined &&\n      $queryTokenPrice.data.length !== 0\n    ) {\n      handleFormatDataPriceChart($queryTokenPrice.data);\n    }\n  }\n\n  const handleFormatDataPriceChart = (data: any) => {\n    dataPriceChart = data?.map((item: any) => {\n      return {\n        value: [item[0], item[1]],\n        itemStyle: {\n          color: \"#1e96fc\",\n        },\n      };\n    });\n\n    if (avgCost !== undefined && Number(avgCost) > 0) {\n      dataAvgCost = data?.map((item: any) => {\n        return {\n          value: [item[0], avgCost],\n          itemStyle: {\n            color: \"#eab308\",\n          },\n        };\n      });\n    }\n  };\n\n  const findClosestObject = (date: any, array: any) => {\n    let closestObject = null;\n    let closestDateDifference = Infinity;\n\n    for (const obj of array) {\n      const dateDifference = Math.abs(dayjs(date).diff(dayjs(obj.date)));\n      if (dateDifference < closestDateDifference) {\n        closestDateDifference = dateDifference;\n        closestObject = obj;\n      }\n    }\n\n    return closestObject;\n  };\n\n  const filterAndCollectDuplicates = (arr: any) => {\n    let dateMap = new Map();\n    let duplicates: any = [];\n\n    arr.forEach((item: any) => {\n      const date = dayjs(item.date);\n      const dateStr = date.format(\"YYYY-MM-DD\");\n\n      if (dateMap.has(dateStr)) {\n        dateMap.get(dateStr).push(item);\n      } else {\n        dateMap.set(dateStr, [item]);\n      }\n    });\n\n    dateMap.forEach((duplicateGroup) => {\n      if (duplicateGroup.length > 1) {\n        duplicates.push(...duplicateGroup);\n      }\n    });\n\n    return duplicates;\n  };\n\n  const handleTooltipBuyAndSell = (data: any) => {\n    return `\n        <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Value\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${\n                  data?.type === \"buy\"\n                    ? formatCurrency(\n                        Number(data?.quantity_in) * Number(data.past_price),\n                      )\n                    : formatCurrency(\n                        Number(data?.quantity_out) * Number(data.past_price),\n                      )\n                }\n              </div>\n            </div>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Amount\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ${\n                  data?.type === \"buy\"\n                    ? formatBalance(Number(data?.quantity_in))\n                    : formatBalance(Number(data?.quantity_out))\n                }\n              </div>\n            </div>\n          </div>\n          \n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Price\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatCurrency(data.past_price)}\n              </div>\n            </div>\n          </div>\n\n        </div>\n    `;\n  };\n\n  const handleTooltipTrade = (data: any) => {\n    const formatDataTrade = data.data.map((item: any) => {\n      return {\n        ...item,\n        past_value:\n          item.type === \"sell\"\n            ? Number(item.past_price) * Number(item.quantity_out)\n            : Number(item.past_price) * Number(item.quantity_in),\n      };\n    });\n    const groupBuySellHistoryData = groupBy(formatDataTrade, \"type\");\n    const buySellHistoryData = Object.getOwnPropertyNames(\n      groupBuySellHistoryData,\n    );\n\n    const formatData = buySellHistoryData.map((item) => {\n      return {\n        type: item,\n        amount:\n          item === \"sell\"\n            ? groupBuySellHistoryData[item]?.reduce(\n                (prev, item) => prev + Number(item.quantity_out),\n                0,\n              )\n            : groupBuySellHistoryData[item]?.reduce(\n                (prev, item) => prev + Number(item.quantity_in),\n                0,\n              ),\n        value: 0,\n        price: data?.value[1],\n        past_value: groupBuySellHistoryData[item].reduce(\n          (prev, item) => prev + Number(item.past_value),\n          0,\n        ),\n      };\n    });\n\n    const typeList = formatDataTrade.map((item: any) => {\n      if (item.type === \"sell\") {\n        return \"sell\";\n      } else if (item.type === \"buy\") {\n        return \"buy\";\n      }\n    });\n\n    const allTypeSell = typeList.every((item: any) => item === \"sell\");\n    const allTypeBuy = typeList.every((item: any) => item === \"buy\");\n\n    const sumPastValue = formatDataTrade.reduce(\n      (prev: any, item: any) => prev + Number(item.past_value),\n      0,\n    );\n\n    const selectedPastPrice = formatDataTrade.find((item: any) => {\n      return item.value[0] === data?.value[0];\n    });\n\n    if (allTypeSell) {\n      const sumAmountSell = formatDataTrade.reduce(\n        (prev: any, item: any) => prev + Number(item.quantity_out),\n        0,\n      );\n      return `\n        <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Value\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatCurrency(Number(sumPastValue))}\n              </div>\n            </div>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Amount\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ${formatBalance(Number(sumAmountSell))}\n              </div>\n            </div>\n          </div>\n          \n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Price\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatCurrency(selectedPastPrice?.past_price)}\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n\n    if (allTypeBuy) {\n      const sumAmountBuy = formatDataTrade.reduce(\n        (prev: any, item: any) => prev + Number(item.quantity_in),\n        0,\n      );\n      return `\n        <div style=\"display: flex; flex-direction: column; gap: 12px;\">\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Value\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatCurrency(Number(sumPastValue))}\n              </div>\n            </div>\n          </div>\n\n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Amount\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ${formatBalance(Number(sumAmountBuy))}\n              </div>\n            </div>\n          </div>\n          \n          <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              ${$t(\"Price\")}\n            </div>\n            <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n              <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatCurrency(selectedPastPrice?.past_price)}\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n\n    return `\n        <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n          <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n            $isDarkMode ? \"white\" : \"black\"\n          }\">\n            ${$t(\"Price\")}\n          </div>\n          <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n            <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n              $isDarkMode ? \"white\" : \"black\"\n            }\">\n              $${formatCurrency(formatData[0]?.price)}\n            </div>\n          </div>\n        </div>\n       ${formatData\n         .map((item) => {\n           return `\n              <div style=\"display: flex; flex-direction: column; gap: 6px;\">\n                <div style=\"display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                  $isDarkMode ? \"white\" : \"black\"\n                }\">\n                  <span style=\"margin-top: 5px; display:inline-block; margin-right:4px; border-radius:10px; width:10px; height:10px; background-color: ${\n                    item?.type === \"buy\" ? \"#00b580\" : \"#ef4444\"\n                  };\"></span>\n                  <span style=\"text-transform: capitalize;\">${item?.type}</span>\n                </div>\n\n           \n                <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                  <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                    $isDarkMode ? \"white\" : \"black\"\n                  }\">\n                    ${$t(\"Value\")}\n                  </div>\n                  <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n                    <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                      $isDarkMode ? \"white\" : \"black\"\n                    }\">\n                      $${formatCurrency(item.past_value)}\n                    </div>\n                  </div>\n                </div>\n\n                <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                  <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                    $isDarkMode ? \"white\" : \"black\"\n                  }\">\n                    ${$t(\"Amount\")}\n                  </div>\n                  <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right; margin-top: 2px;\">\n                    <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                      $isDarkMode ? \"white\" : \"black\"\n                    }\">\n                      ${formatBalance(Number(item?.amount))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            `;\n         })\n         .join(\"\")}\n    `;\n  };\n\n  $: {\n    if (time) {\n      if (dataPriceChart && dataPriceChart.length !== 0) {\n        const firstDataPriceChart = dataPriceChart[0]?.value[0];\n        const lastDataPriceChart =\n          dataPriceChart[dataPriceChart.length - 1]?.value[0];\n\n        const formatDataBuyHistory = buyHistoryTradeList?.map((item: any) => {\n          const selected = findClosestObject(\n            item.created_at * 1000,\n            dataPriceChart.map((item: any) => {\n              return {\n                ...item,\n                date: item?.value[0] || 0,\n              };\n            }),\n          );\n          return {\n            quantity_in: item.quantity_in,\n            quantity_out: item.quantity_out,\n            itemStyle: { color: \"#00b580\" },\n            value: [item?.created_at * 1000, selected?.value[1] || 0],\n            type: \"buy\",\n            past_price: item?.to_price,\n          };\n        });\n        const formatDataSellHistory = sellHistoryTradeList?.map((item: any) => {\n          const selected = findClosestObject(\n            item.created_at * 1000,\n            dataPriceChart.map((item: any) => {\n              return {\n                ...item,\n                date: item?.value[0] || 0,\n              };\n            }),\n          );\n          return {\n            quantity_in: item.quantity_in,\n            quantity_out: item.quantity_out,\n            itemStyle: { color: \"#ef4444\" },\n            value: [item.created_at * 1000, selected?.value[1] || 0],\n            type: \"sell\",\n            past_price: item.from_price,\n          };\n        });\n        const dataHistory = formatDataBuyHistory?.concat(formatDataSellHistory);\n\n        // logic data trade\n        const tradeHistoryData = filterAndCollectDuplicates(\n          dataHistory.map((item: any) => {\n            return {\n              ...item,\n              date: dayjs(item.value[0]).format(\"YYYY-MM-DD\"),\n            };\n          }),\n        );\n        const groupBuyTradeHistoryData = groupBy(tradeHistoryData, \"date\");\n        const dateTradeHistoryData = Object.getOwnPropertyNames(\n          groupBuyTradeHistoryData,\n        );\n        const dataTrade = dateTradeHistoryData.map((item) => {\n          let color = \"#6b7280\";\n          const selected = findClosestObject(\n            groupBuyTradeHistoryData[item][0].value[0],\n            dataPriceChart.map((item: any) => {\n              return {\n                ...item,\n                date: item.value[0],\n              };\n            }),\n          );\n\n          const typeList = groupBuyTradeHistoryData[item].map((item) => {\n            if (item.type === \"sell\") {\n              return \"sell\";\n            } else if (item.type === \"buy\") {\n              return \"buy\";\n            }\n          });\n\n          const allTypeSell = typeList.every((item) => item === \"sell\");\n          const allTypeBuy = typeList.every((item) => item === \"buy\");\n\n          if (allTypeSell) {\n            color = \"#ef4444\";\n          }\n\n          if (allTypeBuy) {\n            color = \"#00b580\";\n          }\n\n          return {\n            dateFormat: item,\n            date: groupBuyTradeHistoryData[item][0].value[0],\n            data: groupBuyTradeHistoryData[item],\n            itemStyle: { color },\n            value: [\n              groupBuyTradeHistoryData[item][0]?.value[0],\n              selected?.value[1] || 0,\n            ],\n            type: \"trade\",\n          };\n        });\n        const formatDataTrade = dataTrade.filter((item) => {\n          return dayjs(item.date).isBetween(\n            dayjs(firstDataPriceChart),\n            dayjs(lastDataPriceChart),\n            null,\n            \"[]\",\n          );\n        });\n\n        // logic data buy and data sell\n        let filteredDuplicateHistoryData = [];\n        if (formatDataTrade && formatDataTrade.length !== 0) {\n          filteredDuplicateHistoryData = dataHistory\n            .map((item: any) => {\n              return {\n                ...item,\n                date: item.value[0],\n              };\n            })\n            .filter(\n              (elem: any) =>\n                !tradeHistoryData\n                  .map((item: any) => {\n                    return {\n                      ...item,\n                      date: item.value[0],\n                    };\n                  })\n                  .find((item: any) => elem.date === item.date),\n            );\n        } else {\n          filteredDuplicateHistoryData = dataHistory.map((item: any) => {\n            return {\n              ...item,\n              date: item.value[0],\n            };\n          });\n        }\n        const groupBuyHistoryData = groupBy(\n          filteredDuplicateHistoryData,\n          \"type\",\n        );\n        const dataBuy = groupBuyHistoryData[\"buy\"];\n        const dataSell = groupBuyHistoryData[\"sell\"];\n        const formatDataBuy = (dataBuy || []).filter((item) => {\n          return dayjs(item.date).isBetween(\n            dayjs(firstDataPriceChart),\n            dayjs(lastDataPriceChart),\n            null,\n            \"[]\",\n          );\n        });\n        const formatDataSell = (dataSell || []).filter((item) => {\n          return dayjs(item.date).isBetween(\n            dayjs(firstDataPriceChart),\n            dayjs(lastDataPriceChart),\n            null,\n            \"[]\",\n          );\n        });\n\n        optionLine = {\n          ...optionLine,\n          series: [\n            {\n              name: \"Trade\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: formatDataTrade || [],\n            },\n            {\n              name: \"Buy\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: formatDataBuy || [],\n            },\n            {\n              name: \"Sell\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: formatDataSell || [],\n            },\n            {\n              name: \"Price\",\n              type: \"line\",\n              zlevel: 1,\n              z: 2,\n              lineStyle: {\n                type: \"solid\",\n                color: \"#1e96fc\",\n              },\n              showSymbol: false,\n              data: dataPriceChart,\n            },\n            {\n              name: \"Avg Cost\",\n              type: \"line\",\n              zlevel: 1,\n              z: 2,\n              lineStyle: {\n                type: \"dashed\",\n                color: \"#eab308\",\n              },\n              endLabel: {\n                show: true,\n                offset: [-75, -14],\n                formatter: () => {\n                  return \"Avg Cost\";\n                },\n                color: \"#eab308\",\n              },\n              showSymbol: false,\n              data: dataAvgCost || [],\n            },\n          ],\n        };\n      } else {\n        optionLine = {\n          ...optionLine,\n          series: [\n            {\n              name: \"Trade\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: [],\n            },\n            {\n              name: \"Buy\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: [],\n            },\n            {\n              name: \"Sell\",\n              type: \"scatter\",\n              zlevel: 2,\n              z: 3,\n              symbolSize: 16,\n              data: [],\n            },\n            {\n              name: \"Price\",\n              type: \"line\",\n              symbol: \"circle\",\n              zlevel: 1,\n              z: 2,\n              datasetIndex: 1,\n              symbolSize: 0.1,\n              lineStyle: {\n                type: \"solid\",\n                color: \"#1e96fc\",\n              },\n              showSymbol: false,\n              data: [],\n            },\n            {\n              name: \"Avg Cost\",\n              type: \"line\",\n              symbol: \"circle\",\n              zlevel: 1,\n              z: 2,\n              datasetIndex: 1,\n              symbolSize: 0.1,\n              lineStyle: {\n                type: \"dashed\",\n                color: \"#eab308\",\n              },\n              showSymbol: false,\n              data: [],\n            },\n          ],\n        };\n      }\n    }\n  }\n\n  $: {\n    if (\n      listEVMNativeTokenSymbol.includes(symbol) ||\n      [\"MOVE\", \"NEAR\", \"AURA\", \"INJ\", \"ALGO\"].includes($typeWallet)\n    ) {\n      selectedTypeChart = \"line\";\n    }\n  }\n\n  $: theme = $isDarkMode ? \"dark\" : \"white\";\n</script>\n\n<div class=\"flex flex-col gap-4\">\n  <div class=\"flex md:flex-row flex-col justify-between gap-6\">\n    {#if !listEVMNativeTokenSymbol.includes(symbol) && ![\"MOVE\", \"NEAR\", \"AURA\", \"INJ\", \"ALGO\"].includes($typeWallet)}\n      <div class=\"flex items-center\">\n        <AnimateSharedLayout>\n          {#each typeChart as type}\n            <div\n              class=\"relative cursor-pointer text-base font-medium py-1 px-3 rounded-[100px] transition-all\"\n              on:click={() => (selectedTypeChart = type.value)}\n            >\n              <div\n                class={`relative z-1 ${\n                  selectedTypeChart === type.value && \"text-white\"\n                }`}\n              >\n                {$t(type.label)}\n              </div>\n              {#if type.value === selectedTypeChart}\n                <Motion\n                  let:motion\n                  layoutId=\"active-pill\"\n                  transition={{ type: \"spring\", duration: 0.6 }}\n                >\n                  <div\n                    class=\"absolute inset-0 rounded-full bg-[#1E96FC] z-0\"\n                    use:motion\n                  />\n                </Motion>\n              {/if}\n            </div>\n          {/each}\n        </AnimateSharedLayout>\n      </div>\n    {/if}\n\n    {#if selectedTypeChart === \"line\"}\n      <div class=\"flex items-center\">\n        <AnimateSharedLayout>\n          {#each timeFrame as type}\n            <div\n              class=\"relative cursor-pointer text-sm font-medium py-1 px-3 rounded-[100px] transition-all\"\n              on:click={() => {\n                if (\n                  !$queryTokenPrice.isError ||\n                  (dataPriceChart && dataPriceChart.length !== 0)\n                ) {\n                  selectedTimeFrame = type.value;\n                }\n              }}\n            >\n              <div\n                class={`relative z-1 ${\n                  type.value === selectedTimeFrame && \"text-white\"\n                }`}\n              >\n                {type.label}\n              </div>\n              {#if type.value === selectedTimeFrame}\n                <Motion\n                  let:motion\n                  layoutId=\"active-pill\"\n                  transition={{ type: \"spring\", duration: 0.6 }}\n                >\n                  <div\n                    class=\"absolute inset-0 rounded-full z-0\"\n                    style={`background:${\n                      !$queryTokenPrice.isError ||\n                      (dataPriceChart && dataPriceChart.length !== 0)\n                        ? \"rgba(30, 150, 252, 1)\"\n                        : \"#dddddd\"\n                    } `}\n                    use:motion\n                  />\n                </Motion>\n              {/if}\n            </div>\n          {/each}\n        </AnimateSharedLayout>\n      </div>\n    {/if}\n  </div>\n\n  {#if $queryTokenPrice.isFetching}\n    <div class=\"flex items-center justify-center h-[475px]\">\n      {#if isNimbusVersion}\n        <LoadingPremium />\n      {:else}\n        <Loading />\n      {/if}\n    </div>\n  {:else}\n    <div class=\"h-full\">\n      {#if selectedTypeChart === \"candles\"}\n        <div class=\"relative h-[485px] mb-12\">\n          <TradingViewChart\n            id={symbol}\n            mobile={false}\n            {contractAddress}\n            {price}\n            {chain}\n            {buyHistoryTradeList}\n            {sellHistoryTradeList}\n            {selectedTypeChart}\n            {avgCost}\n          />\n        </div>\n        <div class=\"text-sm text_00000099\">\n          {$t(\"Chart by\")}\n          <a\n            href=\"https://www.tradingview.com/\"\n            class=\"hover:underline max-lg:underline text-[#1E96FC]\"\n            target=\"_blank\"\n          >\n            TradingView\n          </a>\n        </div>\n      {/if}\n\n      {#if selectedTypeChart === \"line\"}\n        {#if $queryTokenPrice.isError || (dataPriceChart && dataPriceChart.length === 0)}\n          <div\n            class=\"flex justify-center items-center h-[485px] text-base text-gray-400 relative\"\n          >\n            {$t(\"Empty\")}\n            {#if [\"CEX\", \"BTC\", \"AURA\", \"INJ\", \"ALGO\"].includes(chain)}\n              <div\n                class={`absolute top-0 left-0 rounded-[20px] w-full h-full flex flex-col items-center gap-3 pt-62 z-7 backdrop-blur-md ${\n                  $isDarkMode ? \"bg-black/90\" : \"bg-white/95\"\n                }`}\n              >\n                <div class=\"text-lg\">\n                  {$t(\"Coming soon 🚀\")}\n                </div>\n              </div>\n            {/if}\n          </div>\n        {:else}\n          <div class=\"relative h-[485px]\">\n            <EChart\n              id={id + \"line-chart\"}\n              {theme}\n              notMerge={true}\n              option={optionLine}\n              height={485}\n            />\n\n            {#if isNimbusVersion}\n              <div\n                class=\"opacity-40 absolute transform -translate-x-1/2 -translate-y-1/2 pointer-events-none top-1/2 left-1/2\"\n              >\n                <img\n                  src={$isDarkMode ? LogoWhite : Logo}\n                  alt=\"logo\"\n                  loading=\"lazy\"\n                  decoding=\"async\"\n                  width=\"140\"\n                  height=\"140\"\n                />\n              </div>\n            {/if}\n          </div>\n        {/if}\n      {/if}\n    </div>\n  {/if}\n</div>\n\n<style>\n</style>\n","<script lang=\"ts\">\n  import { isNimbusVersion } from \"~/utils/constants\";\n  import { nimbus } from \"~/lib/network\";\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import { wallet, isDarkMode, typeWallet, selectedPackage } from \"~/store\";\n  import { autoFontSize } from \"~/utils/index\";\n  import numeral from \"numeral\";\n  import { TokenDetailAVGCostDistributionSupported } from \"./utils\";\n  import { t } from \"~/lib/i18n\";\n\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import EChart from \"~/components/EChart.svelte\";\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n  import Loading from \"~/components/Loading.svelte\";\n\n  import Logo from \"~/assets/logo-1.svg\";\n  import LogoWhite from \"~/assets/logo-white.svg\";\n\n  export let data;\n  export let id;\n  export let avgCost;\n  export let filterType;\n\n  let optionBar: any = {\n    tooltip: {\n      trigger: \"axis\",\n      extraCssText: \"z-index: 9997\",\n      formatter: function (params: any) {\n        return `\n            <div style=\"display: flex; flex-direction: column; gap: 12px; min-width: 260px;\">\n              <div style=\"font-weight: 500; font-size: 16px; line-height: 19px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                $${formatPrice(params[0]?.axisValue)}\n              </div>\n              <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                  $isDarkMode ? \"white\" : \"black\"\n                }\">\n                  <span>${params[0]?.marker}</span>\n                  ${$t(\"Amount\")}\n                </div>\n\n                <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right;\">\n                  <div style=\"margin-top: 4px; display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                    $isDarkMode ? \"white\" : \"black\"\n                  };\">\n                    ${formatPrice(params[0]?.value[1])}\n                  </div>\n                </div>\n              </div>\n              \n              ${\n                avgCost !== 0\n                  ? `\n                  <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                    <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                      $isDarkMode ? \"white\" : \"black\"\n                    }\">\n                      <div style=\"margin-top: 5px; display:inline-block;margin-right:4px;border-radius:10px;width:10px;height:10px;background-color:#eab308;\"></div>\n                      ${$t(\"Your Avg Cost\")}\n                    </div>\n                    <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right;\">\n                      <div style=\"margin-top: 4px; display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                        $isDarkMode ? \"white\" : \"black\"\n                      };\">\n                        $${formatPrice(avgCost)}\n                      </div>\n                    </div>\n                  </div>\n                `\n                  : ``\n              }\n              \n              <div style=\"display: grid; grid-template-columns: repeat(2, minmax(0, 1fr));\">\n                <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); display: flex; align-items: centers; gap: 4px; font-weight: 500; color: ${\n                  $isDarkMode ? \"white\" : \"black\"\n                }\">\n                  <div style=\"margin-top: 5px; display:inline-block;margin-right:4px;border-radius:10px;width:10px;height:10px;background-color:#1e96fc;\"></div>\n                  ${$t(\"Current Price\")}\n                </div>\n                <div style=\"grid-template-columns: repeat(1, minmax(0, 1fr)); text-align: right;\">\n                  <div style=\"margin-top: 4px; display:flex; justify-content: flex-end; align-items: center; gap: 4px; flex: 1; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                    $isDarkMode ? \"white\" : \"black\"\n                  };\">\n                    $${formatPrice(data?.market_price)}\n                  </div>\n                </div>\n              </div>\n            </div>`;\n      },\n    },\n    grid: {\n      left: 70,\n      right: 70,\n    },\n    toolbox: {\n      right: \"4%\",\n      feature: {\n        dataZoom: {\n          yAxisIndex: \"none\",\n        },\n      },\n    },\n    xAxis: {\n      type: \"value\",\n      axisTick: { show: false },\n      nameGap: 30,\n      min: function (value: any) {\n        return value.min * 0.95;\n      },\n      max: function (value: any) {\n        return value.max * 1.05;\n      },\n      axisLabel: {\n        formatter: function (value: any, index: any) {\n          return \"$\" + formatPrice(value);\n        },\n        fontSize: autoFontSize(),\n      },\n    },\n    yAxis: {\n      type: \"value\",\n      axisTick: { show: false },\n      axisLabel: {\n        formatter: function (value: any, index: any) {\n          return (\n            `${value < 0 ? \"-\" : \"\"}` + numeral(Math.abs(value)).format(\"0.00a\")\n          );\n        },\n        fontSize: autoFontSize(),\n      },\n    },\n    series: [],\n  };\n\n  const handleGetTradeHistoryAnalysis = async (address: any, filter: any) => {\n    const response: any = await nimbus.get(\n      `/v2/address/${address}/token/${data?.contractAddress}/trade-analysis?chain=${data?.chain}&type=${filter?.value}`\n    );\n    return response?.data;\n  };\n\n  $: queryHistoryTokenDetailAnalysis = createQuery({\n    queryKey: [\"trade-history-analysis\", data, $wallet, filterType],\n    queryFn: () => handleGetTradeHistoryAnalysis($wallet, filterType),\n    retry: false,\n    enabled:\n      // $selectedPackage !== \"FREE\" &&\n      data !== undefined &&\n      Object.keys(data).length !== 0 &&\n      $wallet &&\n      $wallet?.length !== 0 &&\n      TokenDetailAVGCostDistributionSupported.includes($typeWallet),\n  });\n\n  const formatPrice = (value: number) => {\n    if (value && value?.toString()?.includes(\"e-\")) {\n      const numStr = value?.toString();\n      const eIndex = numStr.indexOf(\"e\");\n      if (eIndex !== -1) {\n        const significand = parseFloat(\n          numStr\n            .slice(0, 4)\n            .split(\"\")\n            .filter((e) => e != \".\")\n            .join(\"\")\n        );\n\n        return `0.0...0${significand}`;\n      }\n    } else {\n      return numeral(Math.abs(value)).format(\"0.000000a\");\n    }\n  };\n\n  let sumCount = 0;\n  let sumCountWinHistoryTokenDetail = 0;\n  let sumCountLossHistoryTokenDetail = 0;\n  let sumTotalToken = 0;\n  let sumWinProfitHistoryTokenDetail = 0;\n  let sumLossProfitHistoryTokenDetail = 0;\n\n  $: {\n    if (\n      !$queryHistoryTokenDetailAnalysis.isError &&\n      $queryHistoryTokenDetailAnalysis.data !== undefined &&\n      $queryHistoryTokenDetailAnalysis.data.length !== 0\n    ) {\n      const dataChart = $queryHistoryTokenDetailAnalysis?.data?.map(\n        (item: any) => {\n          return [item?.price, item?.totalToken];\n        }\n      );\n\n      if (avgCost !== 0) {\n        optionBar = {\n          ...optionBar,\n          series: [\n            {\n              tooltip: {\n                show: true,\n              },\n              type: \"bar\",\n              itemStyle: {\n                color: \"#27326F\",\n                borderColor: \"#27326F\",\n              },\n              data: dataChart,\n              markLine: {\n                precision: 10,\n                symbol: [\"none\", \"none\"],\n                data: [\n                  {\n                    name: \"Current Price\",\n                    label: \"Current Price\",\n                    xAxis:\n                      data?.market_price || data?.price?.price || data?.rate,\n                    lineStyle: {\n                      color: \"#1e96fc\",\n                      type: \"solid\",\n                      width: 2,\n                    },\n                  },\n                  {\n                    name: \"Avg Cost\",\n                    label: \"Avg Cost\",\n                    xAxis: avgCost || 0,\n                    lineStyle: {\n                      color: \"#eab308\",\n                      type: \"dashed\",\n                      width: 2,\n                    },\n                  },\n                ],\n                label: {\n                  show: false,\n                },\n              },\n            },\n          ],\n        };\n      } else {\n        optionBar = {\n          ...optionBar,\n          series: [\n            {\n              tooltip: {\n                show: true,\n              },\n              type: \"bar\",\n              itemStyle: {\n                color: \"#27326F\",\n                borderColor: \"#27326F\",\n              },\n              data: dataChart,\n              markLine: {\n                precision: 10,\n                symbol: [\"none\"],\n                data: [\n                  {\n                    name: \"Current Price\",\n                    label: \"Current Price\",\n                    xAxis: data?.market_price || 0,\n                    lineStyle: {\n                      color: \"#1e96fc\",\n                      type: \"solid\",\n                      width: 2,\n                    },\n                  },\n                ],\n                label: {\n                  show: false,\n                },\n              },\n            },\n          ],\n        };\n      }\n\n      sumCount = $queryHistoryTokenDetailAnalysis?.data.reduce(\n        (prev: any, item: any) => prev + Number(item.count),\n        0\n      );\n\n      sumTotalToken = $queryHistoryTokenDetailAnalysis?.data.reduce(\n        (prev: any, item: any) => prev + Number(item.totalToken),\n        0\n      );\n\n      // logic win\n      const winHistoryTokenDetail =\n        $queryHistoryTokenDetailAnalysis?.data.filter(\n          (item: any) => Number(item.price) <= Number(data?.market_price)\n        );\n\n      const formatWinHistoryTokenDetail = winHistoryTokenDetail?.map((item) => {\n        return {\n          ...item,\n          valueProfit:\n            Number(data?.market_price) * Number(item.totalToken) -\n            Number(item.price) * Number(item.totalToken),\n        };\n      });\n\n      sumWinProfitHistoryTokenDetail = formatWinHistoryTokenDetail.reduce(\n        (prev: any, item: any) => prev + Number(item.valueProfit),\n        0\n      );\n\n      sumCountWinHistoryTokenDetail = winHistoryTokenDetail.reduce(\n        (prev: any, item: any) => prev + Number(item.count),\n        0\n      );\n\n      // logic lose\n      const lossHistoryTokenDetail =\n        $queryHistoryTokenDetailAnalysis.data.filter(\n          (item: any) => Number(item.price) > Number(data?.market_price)\n        );\n\n      const formatLossHistoryTokenDetail = lossHistoryTokenDetail?.map(\n        (item: any) => {\n          return {\n            ...item,\n            valueProfit:\n              Number(data?.market_price) * Number(item.totalToken) -\n              Number(item.price) * Number(item.totalToken),\n          };\n        }\n      );\n\n      sumLossProfitHistoryTokenDetail = formatLossHistoryTokenDetail.reduce(\n        (prev: any, item: any) => prev + Number(item.valueProfit),\n        0\n      );\n\n      sumCountLossHistoryTokenDetail = lossHistoryTokenDetail.reduce(\n        (prev: any, item: any) => prev + Number(item.count),\n        0\n      );\n    } else {\n      optionBar = {\n        ...optionBar,\n        series: [\n          {\n            tooltip: {\n              show: true,\n            },\n            type: \"bar\",\n            itemStyle: {\n              color: \"#27326F\",\n              borderColor: \"#27326F\",\n            },\n            data: [],\n            markLine: {\n              precision: 10,\n              symbol: [\"none\", \"none\"],\n              data: [\n                {\n                  name: \"Current Price\",\n                  label: \"Current Price\",\n                  xAxis: 0,\n                  lineStyle: {\n                    color: \"#1e96fc\",\n                    type: \"solid\",\n                    width: 2,\n                  },\n                },\n                {\n                  name: \"Avg Cost\",\n                  label: \"Avg Cost\",\n                  xAxis: 0,\n                  lineStyle: {\n                    color: \"#eab308\",\n                    type: \"dashed\",\n                    width: 2,\n                  },\n                },\n              ],\n              label: {\n                show: false,\n              },\n            },\n          },\n        ],\n      };\n    }\n  }\n\n  $: theme = $isDarkMode ? \"dark\" : \"white\";\n</script>\n\n<div class=\"flex flex-col pb-10\">\n  {#if $queryHistoryTokenDetailAnalysis.isFetching}\n    <div class=\"flex items-center justify-center h-[475px]\">\n      {#if isNimbusVersion}\n        <LoadingPremium />\n      {:else}\n        <Loading />\n      {/if}\n    </div>\n  {:else}\n    <div class=\"h-full\">\n      {#if $queryHistoryTokenDetailAnalysis.isError || ($queryHistoryTokenDetailAnalysis.data !== undefined && $queryHistoryTokenDetailAnalysis.data.length === 0)}\n        <div\n          class=\"flex justify-center items-center h-[475px] text-base text-gray-400\"\n        >\n          {$t(\"Empty\")}\n        </div>\n      {:else}\n        <div class=\"relative\">\n          <EChart\n            id={id + \"bar-chart\"}\n            {theme}\n            notMerge={true}\n            option={optionBar}\n            height={485}\n          />\n\n          {#if isNimbusVersion}\n            <div\n              class=\"opacity-40 absolute transform -translate-x-1/2 -translate-y-1/2 pointer-events-none top-1/2 left-1/2\"\n            >\n              <img\n                src={$isDarkMode ? LogoWhite : Logo}\n                alt=\"logo\"\n                loading=\"lazy\"\n                decoding=\"async\"\n                width=\"140\"\n                height=\"140\"\n              />\n            </div>\n          {/if}\n        </div>\n      {/if}\n    </div>\n  {/if}\n\n  <div class=\"flex flex-col gap-14\">\n    <div class=\"flex flex-col gap-2\">\n      <div class=\"text-lg\">{$t(\"Win / Lose addresses\")}</div>\n      <div\n        class=\"h-2 rounded-lg relative\"\n        style={`background: ${\n          sumCountWinHistoryTokenDetail === 0\n            ? \"#00000066\"\n            : `linear-gradient(to right, #25b770 ${(\n                (sumCountWinHistoryTokenDetail / sumCount) *\n                100\n              ).toFixed(2)}%, #e14040 ${(\n                (sumCountWinHistoryTokenDetail / sumCount) *\n                100\n              ).toFixed(2)}%)`\n        }`}\n      >\n        <div class=\"absolute top-5 left-0 text-sm\">\n          <TooltipNumber\n            number={(sumCountWinHistoryTokenDetail / sumCount) * 100}\n            type=\"percent\"\n          />% {$t(\"Win\")}\n        </div>\n        <div class=\"absolute top-5 right-0 text-sm\">\n          <TooltipNumber\n            number={(sumCountLossHistoryTokenDetail / sumCount) * 100}\n            type=\"percent\"\n          />% {$t(\"Lose\")}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex flex-col gap-2\">\n      <div class=\"text-lg\">{$t(\"Profit / Loss\")}</div>\n      <div\n        class=\"h-2 rounded-lg relative\"\n        style={`background: ${\n          sumWinProfitHistoryTokenDetail === 0\n            ? \"#00000066\"\n            : `linear-gradient(to right, #25b770 ${Math.abs(\n                (sumWinProfitHistoryTokenDetail /\n                  (Math.abs(sumLossProfitHistoryTokenDetail) +\n                    Math.abs(sumWinProfitHistoryTokenDetail))) *\n                  100\n              ).toFixed(2)}%, #e14040 ${Math.abs(\n                (sumWinProfitHistoryTokenDetail /\n                  (Math.abs(sumLossProfitHistoryTokenDetail) +\n                    Math.abs(sumWinProfitHistoryTokenDetail))) *\n                  100\n              )?.toFixed(2)}%)`\n        }`}\n      >\n        <div class=\"flex gap-1 absolute top-5 left-0 text-sm w-max\">\n          {$t(\"Profit\")}\n          <TooltipNumber\n            number={Math.abs(sumWinProfitHistoryTokenDetail)}\n            type=\"value\"\n          />\n        </div>\n        <div class=\"flex gap-1 absolute top-5 right-0 text-sm\">\n          {$t(\"Loss\")}\n          <TooltipNumber\n            number={Math.abs(sumLossProfitHistoryTokenDetail)}\n            type=\"value\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n</style>\n","<script lang=\"ts\">\n  import { selectedPackage, user } from \"~/store\";\n  import { formatHeaderTokenHistoryCSV } from \"~/utils/index\";\n  import tooltip from \"~/lib/tooltip\";\n  import { t } from \"~/lib/i18n\";\n\n  import Button from \"~/components/Button.svelte\";\n\n  export let data;\n  export let name;\n  export let triggerExportCSV = () => {};\n  export let isLoading;\n  export let isDisabled;\n\n  $: {\n    if (data && data.length !== 0) {\n      handleFormatData(data);\n    }\n  }\n\n  const handleFormatData = (data: any) => {\n    const headers = Object.keys(data[0])\n      ?.map((item) => formatHeaderTokenHistoryCSV[item])\n      .toString();\n\n    const body = data?.map((item: any) => {\n      return Object.values(item).toString();\n    });\n\n    const dataCSV = [headers, ...body].join(\"\\n\");\n\n    if (dataCSV) {\n      downloadCSV(dataCSV);\n    }\n  };\n\n  const downloadCSV = (data: any) => {\n    const blob = new Blob([data], { type: \"application/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.download = `${name}.csv`;\n    a.href = url;\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    triggerExportCSV();\n  };\n</script>\n\n{#if $selectedPackage !== \"Free\" && $user && Object.keys($user).length !== 0 && !isDisabled}\n  <div class=\"w-max min-w-[142px]\">\n    <Button\n      variant=\"premium\"\n      on:click={() => {\n        triggerExportCSV();\n      }}\n      {isLoading}\n    >\n      {$t(\"Download CSV\")}\n    </Button>\n  </div>\n{:else}\n  <div\n    use:tooltip={{\n      content: `<tooltip-detail text=\"Upgrade to Premium to download your csv\" />`,\n      allowHTML: true,\n      placement: \"top\",\n      interactive: true,\n    }}\n    class=\"w-max\"\n  >\n    <Button variant=\"premium\" disabled>{$t(\"Download CSV\")}</Button>\n  </div>\n{/if}\n\n<style></style>\n","<script lang=\"ts\">\n  import { useNavigate } from \"svelte-navigator\";\n  import { nimbus } from \"~/lib/network\";\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import {\n    typeWallet,\n    isDarkMode,\n    isHidePortfolio,\n    wallet,\n    selectedPackage,\n  } from \"~/store\";\n  import { linkExplorer, listSupported } from \"~/lib/chains\";\n  import { shorterAddress } from \"~/utils/index\";\n  import { filterAvgCostType, isNimbusVersion } from \"~/utils/constants\";\n  import dayjs from \"dayjs\";\n  import { TokenDetailAVGCostDistributionSupported } from \"./utils\";\n  import { t } from \"~/lib/i18n\";\n\n  import Pagination from \"~/components/Pagination.svelte\";\n  import Select from \"~/components/Select.svelte\";\n  import Button from \"~/components/Button.svelte\";\n  import Loading from \"~/components/Loading.svelte\";\n  import TooltipTitle from \"~/components/TooltipTitle.svelte\";\n  import ErrorBoundary from \"~/components/ErrorBoundary.svelte\";\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n  import OverviewCard from \"~/components/OverviewCard.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import TokenHistoryItem from \"./TokenHistoryItem.svelte\";\n  import PriceChart from \"./PriceChart.svelte\";\n  import BalanceAvgCostChart from \"./BalanceAvgCostChart.svelte\";\n  import HistoryCsvExport from \"./HistoryCSVExport.svelte\";\n\n  import TrendUp from \"~/assets/trend-up.svg\";\n  import TrendDown from \"~/assets/trend-down.svg\";\n\n  export let data;\n  export let showSideTokenDetail;\n\n  $: birdeyeChartUrl = `https://birdeye.so/tv-widget/${data?.contractAddress}?chain=sui&viewMode=pair&chartInterval=5&chartType=CANDLE&chartLeftToolbar=show&theme=${$isDarkMode ? \"dark\" : \"light\"}`;\n\n  const navigate = useNavigate();\n\n  $: totalCost = data?.profit?.cost ? Number(data?.profit?.cost) : 0;\n\n  $: realizedProfit = data?.profit?.realizedProfit\n    ? Number(data?.profit?.realizedProfit)\n    : 0;\n\n  $: percentRealizedProfit =\n    Number(data?.avgCost) === 0\n      ? 0\n      : realizedProfit / Math.abs(Number(data?.avgCost));\n\n  $: pnl = data?.pnl\n    ? Number(data?.pnl)\n    : Number(data?.profit?.totalBought || 0) >\n        Number(data?.profit?.totalSold || 0)\n      ? Number(data?.profit?.totalBought || 0) *\n          Number(data?.market_price || 0) +\n        Number(data?.profit?.totalGain || 0) -\n        Number(data?.profit?.cost || 0)\n      : realizedProfit;\n\n  $: unrealizedProfit =\n    Number(data?.avgCost) === 0 ? 0 : Number(pnl) - realizedProfit;\n\n  $: percentUnrealizedProfit =\n    Number(data?.avgCost) === 0\n      ? 0\n      : unrealizedProfit / Math.abs(Number(data?.avgCost));\n\n  const handleGetAllTokenTradeHistory = async (address: any) => {\n    const response: any = await nimbus.get(\n      `/v2/address/${address}/token/${data?.contractAddress}/trade-history?chain=${data?.chain}&isExportCSV=true`\n    );\n    return response?.data;\n  };\n\n  const handleGetTradeHistory = async (address: any, pagination: number) => {\n    const response: any = await nimbus.get(\n      `/v2/address/${address}/token/${data?.contractAddress}/trade-history?chain=${data?.chain}&page=${pagination}`\n    );\n    return response?.data;\n  };\n\n  let exportCSV = false;\n  let isLoading = false;\n\n  let allDataHistory: any = [];\n  let dataCSV: any = [];\n  let dataHistoryTokenDetail: any = [];\n  let sellHistoryTradeList: any = [];\n  let buyHistoryTradeList: any = [];\n  let buyAmounts = 0;\n  let sellAmounts = 0;\n\n  let pagination = 0;\n  let totalPage = 0;\n\n  let filterType = {\n    label: \"ALL\",\n    value: \"all\",\n  };\n\n  $: {\n    if (\n      allDataHistory &&\n      allDataHistory.length !== 0 &&\n      $selectedPackage !== \"FREE\" &&\n      exportCSV\n    ) {\n      handleFormatDataCSV(allDataHistory, data?.contractAddress);\n    }\n  }\n\n  $: queryAllHistoryTokenDetail = createQuery({\n    queryKey: [\"all-trade-history\", showSideTokenDetail, data, $wallet],\n    queryFn: () => handleGetAllTokenTradeHistory($wallet),\n    retry: false,\n    enabled: Boolean(\n      showSideTokenDetail &&\n        data !== undefined &&\n        Object.keys(data).length !== 0 &&\n        $wallet &&\n        $wallet?.length !== 0\n    ),\n  });\n\n  $: queryHistoryTokenDetail = createQuery({\n    queryKey: [\"trade-history\", showSideTokenDetail, data, $wallet, pagination],\n    queryFn: () => handleGetTradeHistory($wallet, pagination),\n    retry: false,\n    enabled: Boolean(\n      showSideTokenDetail &&\n        data !== undefined &&\n        Object.keys(data).length !== 0 &&\n        $wallet &&\n        $wallet?.length !== 0\n    ),\n  });\n\n  $: {\n    if (\n      !$queryAllHistoryTokenDetail?.isError &&\n      $queryAllHistoryTokenDetail?.data !== undefined\n    ) {\n      allDataHistory = $queryAllHistoryTokenDetail?.data?.result;\n      totalPage = $queryAllHistoryTokenDetail?.data?.totalPage;\n    } else {\n      allDataHistory = [];\n      totalPage = 0;\n    }\n  }\n\n  $: {\n    if ($queryAllHistoryTokenDetail?.data?.result) {\n      sellHistoryTradeList = $queryAllHistoryTokenDetail?.data?.result.filter(\n        (item: any) =>\n          item?.from_token_address?.toLowerCase() ===\n          data?.contractAddress?.toLowerCase()\n      );\n      buyHistoryTradeList = $queryAllHistoryTokenDetail?.data?.result.filter(\n        (item: any) =>\n          item?.to_token_address?.toLowerCase() ===\n          data?.contractAddress?.toLowerCase()\n      );\n      buyAmounts = (buyHistoryTradeList || []).reduce(\n        (prev: any, item: any) => prev + Number(item.quantity_out),\n        0\n      );\n      sellAmounts = (sellHistoryTradeList || []).reduce(\n        (prev: any, item: any) => prev + Number(item.quantity_in),\n        0\n      );\n    } else {\n      sellHistoryTradeList = [];\n      buyHistoryTradeList = [];\n      buyAmounts = 0;\n      sellAmounts = 0;\n    }\n  }\n\n  $: {\n    if (\n      !$queryHistoryTokenDetail?.isError &&\n      $queryHistoryTokenDetail?.data !== undefined\n    ) {\n      dataHistoryTokenDetail = $queryHistoryTokenDetail?.data?.result;\n    } else {\n      dataHistoryTokenDetail = [];\n    }\n  }\n\n  $: totalFee =\n    $queryAllHistoryTokenDetail?.data?.result?.reduce(\n      (total: any, item: any) => total + Number(item?.fee),\n      0\n    ) || 0;\n\n  $: colspan =\n    listSupported.filter((item) => item !== \"CEX\").includes($typeWallet) &&\n    dataHistoryTokenDetail.find((item: any) => item.chain !== \"CEX\") !==\n      undefined\n      ? 6\n      : 5;\n\n  const handlePageChange = (page: number) => {\n    pagination = page;\n  };\n\n  const triggerExportCSV = () => {\n    exportCSV = !exportCSV;\n  };\n\n  $: {\n    if (!showSideTokenDetail) {\n      exportCSV = false;\n    }\n  }\n\n  const handleFormatDataCSV = (dataHistory: any, address: any) => {\n    isLoading = true;\n    dataCSV = dataHistory?.map((item: any) => {\n      return {\n        trx_hash: item.transaction_hash,\n        trx_link:\n          item.transaction_hash && item.chain !== \"CEX\"\n            ? linkExplorer(item.chain, item.transaction_hash).trx\n            : \"\",\n        value: `$${Number(item?.amount_usd)}`,\n        time: dayjs(item?.created_at * 1000).format(\"YYYY-MM-DD HH:mm:ss\"),\n        fee: `$${Number(item?.fee)}`,\n        amount_in: Number(item?.quantity_in),\n        token_address_in: item.from_token_address,\n        token_in_symbol:\n          item?.from_token_address?.toLowerCase() === address?.toLowerCase()\n            ? data?.symbol\n            : \"\",\n        amount_out: Number(item?.quantity_out),\n        token_address_out: item?.to_token_address,\n        token_out_symbol:\n          item?.to_token_address?.toLowerCase() === address?.toLowerCase()\n            ? data?.symbol\n            : \"\",\n      };\n    });\n    isLoading = false;\n  };\n</script>\n\n<ErrorBoundary>\n  {#if showSideTokenDetail}\n    {#if $typeWallet === \"MOVE\" || ($typeWallet === \"BUNDLE\" && data?.chain === \"SUI\")}\n      <div class=\"w-full\">\n        <iframe\n          width=\"100%\"\n          height=\"521\"\n          src={birdeyeChartUrl}\n          frameBorder=\"0\"\n          allowFullScreen\n        ></iframe>\n      </div>\n    {:else}\n      <PriceChart\n        contractAddress={data?.contractAddress}\n        cgId={data?.cg_id}\n        {sellHistoryTradeList}\n        {buyHistoryTradeList}\n        id={data?.name}\n        symbol={data?.symbol}\n        avgCost={data?.profit?.averageCost}\n        chain={data?.chain}\n        price={Number(data?.market_price || 0)}\n      />\n    {/if}\n  {/if}\n\n  <div class=\"flex flex-col justify-between gap-6\">\n    <div class=\"flex-1 flex md:flex-row flex-col justify-between gap-6\">\n      <OverviewCard title={$t(\"Avg Cost\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          <div class=\"flex justify-end\">\n            ${#if data?.profit}\n              <TooltipNumber\n                number={data?.profit?.averageCost}\n                type=\"balance\"\n                personalValue\n              />\n            {:else}\n              0\n            {/if}\n          </div>\n        </span>\n      </OverviewCard>\n\n      <OverviewCard title={$t(\"Cost Basis\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          <div class=\"flex justify-end\">\n            ${#if $isHidePortfolio}\n              ******\n            {:else if totalCost}\n              <TooltipNumber number={totalCost} type=\"balance\" personalValue />\n            {:else}\n              0\n            {/if}\n          </div>\n        </span>\n      </OverviewCard>\n    </div>\n\n    <div class=\"flex-1 flex md:flex-row flex-col justify-between gap-6\">\n      <OverviewCard title={$t(\"Realized PnL\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          <div\n            class={`${\n              realizedProfit !== 0\n                ? realizedProfit >= 0\n                  ? \"text-[#00A878]\"\n                  : \"text-red-500\"\n                : \"\"\n            }`}\n          >\n            <TooltipNumber\n              number={Math.abs(realizedProfit)}\n              type=\"value\"\n              personalValue\n            />\n          </div>\n        </span>\n\n        <span slot=\"sub-number\">\n          <div class=\"flex items-center gap-1\">\n            <div\n              class={`flex items-center text-lg ${\n                realizedProfit !== 0\n                  ? realizedProfit >= 0\n                    ? \"text-[#00A878]\"\n                    : \"text-red-500\"\n                  : \"\"\n              }`}\n            >\n              <TooltipNumber\n                number={Math.abs(percentRealizedProfit) * 100}\n                type=\"percent\"\n              />\n              <span>%</span>\n            </div>\n            {#if realizedProfit !== 0}\n              <img\n                src={realizedProfit >= 0 ? TrendUp : TrendDown}\n                alt=\"trend\"\n                class=\"mb-1 block\"\n              />\n            {/if}\n          </div>\n        </span>\n      </OverviewCard>\n\n      <OverviewCard title={$t(\"Unrealized PnL\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          <div\n            class={`${\n              unrealizedProfit !== 0\n                ? percentUnrealizedProfit >= 0\n                  ? \"text-[#00A878]\"\n                  : \"text-red-500\"\n                : \"\"\n            }`}\n          >\n            <TooltipNumber\n              number={Math.abs(unrealizedProfit)}\n              type=\"value\"\n              personalValue\n            />\n          </div>\n        </span>\n\n        <span slot=\"sub-number\">\n          <div class=\"flex items-center gap-1\">\n            <div\n              class={`flex items-center text-lg ${\n                unrealizedProfit !== 0\n                  ? unrealizedProfit >= 0\n                    ? \"text-[#00A878]\"\n                    : \"text-red-500\"\n                  : \"\"\n              }`}\n            >\n              <TooltipNumber\n                number={Math.abs(percentUnrealizedProfit) * 100}\n                type=\"percent\"\n              />\n              <span>%</span>\n            </div>\n            {#if unrealizedProfit !== 0}\n              <img\n                src={unrealizedProfit >= 0 ? TrendUp : TrendDown}\n                alt=\"trend\"\n                class=\"mb-1 block\"\n              />\n            {/if}\n          </div>\n        </span>\n      </OverviewCard>\n    </div>\n\n    <div class=\"flex-1 flex md:flex-row flex-col justify-between gap-6\">\n      <OverviewCard title={$t(\"Total Fee\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          <div class=\"flex justify-end\">\n            ${#if $isHidePortfolio}\n              ******\n            {:else if totalFee}\n              <TooltipNumber number={totalFee} type=\"balance\" personalValue />\n            {:else}\n              0\n            {/if}\n          </div>\n        </span>\n      </OverviewCard>\n\n      <OverviewCard title={$t(\"30D Trx (Buy/Sell)\")}>\n        <span slot=\"number\" class=\"flex items-center\">\n          {buyHistoryTradeList.length}/{sellHistoryTradeList.length}\n        </span>\n      </OverviewCard>\n    </div>\n  </div>\n\n  <div class=\"flex flex-col gap-6\">\n    {#if $typeWallet !== \"CEX\"}\n      <div\n        class={`rounded-[20px] flex flex-col gap-4 relative py-4 lg:px-3 ${\n          $isDarkMode\n            ? \"lg:bg-[#222222]\"\n            : \"bg-[#fff] xl:border border_0000001a\"\n        }`}\n      >\n        <div class=\"flex justify-between items-center\">\n          <div class=\"text-2xl font-medium\">{$t(\"Avg Cost distribution\")}</div>\n          <Select\n            type=\"lang\"\n            positionSelectList=\"right-0\"\n            listSelect={filterAvgCostType}\n            bind:selected={filterType}\n            isDisabledSelectWallet={false}\n            indexWalletDisabled={-1}\n          />\n        </div>\n\n        <BalanceAvgCostChart\n          {data}\n          id={data?.name}\n          avgCost={data?.profit?.averageCost || 0}\n          {filterType}\n        />\n\n        {#if !TokenDetailAVGCostDistributionSupported.includes($typeWallet)}\n          <div\n            class={`absolute top-0 left-0 xl:rounded-[20px] w-full h-full flex flex-col items-center gap-3 pt-62 z-7 backdrop-blur-md ${\n              $isDarkMode ? \"bg-black/90\" : \"bg-white/95\"\n            }`}\n          >\n            <div class=\"text-lg\">{$t(\"Coming soon 🚀\")}</div>\n          </div>\n        {/if}\n\n        <!-- {#if isNimbusVersion}\n          {#if $selectedPackage === \"FREE\"}\n            <div\n              class={`absolute top-0 left-0 xl:rounded-[20px] w-full h-full flex flex-col items-center justify-center gap-3 z-7 backdrop-blur-md ${\n                $isDarkMode ? \"bg-black/90\" : \"bg-white/95\"\n              }`}\n            >\n              <div class=\"flex flex-col items-center gap-1\">\n                {#if isNimbusVersion}\n                  <div class=\"text-lg font-medium\">\n                    {$t(\"Use Nimbus\")}\n                  </div>\n                {/if}\n                <div class=\"text-base text-gray-500\">\n                  {$t(\"Upgrade to Premium to access feature\")}\n                </div>\n              </div>\n              <div class=\"mt-2 w-max\">\n                <Button variant=\"premium\" on:click={() => navigate(\"/upgrade\")}>\n                  {$t(\"Upgrade Plan\")}\n                </Button>\n              </div>\n            </div>\n          {/if}\n        {/if} -->\n      </div>\n    {/if}\n\n    <div\n      class={`rounded-[20px] flex flex-col gap-4 py-4 lg:px-3 xl:border border_0000001a ${\n        $isDarkMode ? \"lg:bg-[#222222]\" : \"bg-[#fff]\"\n      }`}\n    >\n      <div class=\"flex justify-between items-center gap-6\">\n        {#if sellAmounts > buyAmounts}\n          <TooltipTitle\n            tooltipText=\"Unusual trade. Total sell amount > total buy amount\"\n            type=\"warning\"\n          >\n            <div class=\"text-2xl font-medium\">{$t(\"History\")}</div>\n          </TooltipTitle>\n        {:else}\n          <div class=\"text-2xl font-medium\">{$t(\"History\")}</div>\n        {/if}\n        <HistoryCsvExport\n          data={dataCSV}\n          name={`${shorterAddress($wallet)}_${data?.symbol}_Trades`}\n          {triggerExportCSV}\n          {isLoading}\n          isDisabled={allDataHistory && allDataHistory.length === 0}\n        />\n      </div>\n\n      <div\n        class={`rounded-[10px] xl:overflow-visible overflow-x-auto h-full ${\n          $isDarkMode ? \"bg-[#131313]\" : \"bg-[#fff] border border_0000000d\"\n        }`}\n      >\n        <table class=\"table-auto xl:w-full w-[1000px] h-full\">\n          <thead>\n            <tr class=\"bg_f4f5f8\">\n              <th\n                class=\"pl-3 py-3 rounded-tl-[10px] xl:static xl:bg-transparent sticky left-0 z-10 bg_f4f5f8 w-[100px]\"\n              >\n                <div class=\"text-left text-sm uppercase font-medium\">\n                  {$t(\"Amount\")}\n                </div>\n              </th>\n\n              <th class=\"py-3\">\n                <div class=\"text-right text-sm uppercase font-medium\">\n                  {$t(\"Cost/Gain\")}\n                </div>\n              </th>\n\n              <th class=\"py-3\">\n                <div class=\"text-right text-sm uppercase font-medium\">\n                  {$t(\"Price\")}\n                </div>\n              </th>\n\n              <th class=\"py-3\">\n                <div class=\"text-right text-sm uppercase font-medium\">\n                  {$t(\"Fee\")}\n                </div>\n              </th>\n\n              <th\n                class={`py-3 rounded-tr-[10px] ${\n                  listSupported\n                    .filter((item) => item !== \"CEX\")\n                    .includes($typeWallet) &&\n                  dataHistoryTokenDetail.find(\n                    (item) => item.chain !== \"CEX\"\n                  ) !== undefined\n                    ? \"\"\n                    : \"pr-3\"\n                }`}\n              >\n                <div class=\"text-right text-sm uppercase font-medium\">\n                  {$t(\"Time\")}\n                </div>\n              </th>\n\n              {#if listSupported\n                .filter((item) => item !== \"CEX\")\n                .includes($typeWallet) && dataHistoryTokenDetail.find((item) => item.chain !== \"CEX\") !== undefined}\n                <th class=\"py-3 w-10\" />\n              {/if}\n            </tr>\n          </thead>\n          {#if $queryHistoryTokenDetail.isFetching}\n            <tbody>\n              <tr>\n                <td {colspan}>\n                  <div\n                    class=\"flex justify-center items-center h-full py-3 px-3\"\n                  >\n                    {#if isNimbusVersion}\n                      <LoadingPremium />\n                    {:else}\n                      <Loading />\n                    {/if}\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          {:else}\n            <tbody>\n              {#if dataHistoryTokenDetail && dataHistoryTokenDetail?.length === 0}\n                <tr>\n                  <td {colspan}>\n                    <div\n                      class=\"flex justify-center items-center h-full py-3 px-3 text-base text-gray-400\"\n                    >\n                      {$t(\"Empty\")}\n                    </div>\n                  </td>\n                </tr>\n              {:else}\n                {#each dataHistoryTokenDetail as item}\n                  <TokenHistoryItem\n                    data={item}\n                    contractAddress={data?.contractAddress}\n                  />\n                {/each}\n              {/if}\n            </tbody>\n          {/if}\n        </table>\n      </div>\n\n      {#if totalPage !== 0 && totalPage > 1}\n        <Pagination isDisabled={false} {totalPage} {handlePageChange} />\n      {/if}\n    </div>\n  </div>\n</ErrorBoundary>\n\n<style>\n</style>\n","<script lang=\"ts\">\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import QRCode from \"qrcode-generator\";\n  import { getUserInfo } from \"~/lib/queryAPI\";\n  import { t } from \"~/lib/i18n\";\n  import { isNimbusVersion } from \"~/utils/constants\";\n\n  let qrImageDataUrl: any = undefined;\n  let userAddress = \"\";\n  let link = \"\";\n\n  const qrcode = QRCode(0, \"L\");\n\n  $: queryUserInfo = createQuery({\n    queryKey: [\"users-me\"],\n    queryFn: () => getUserInfo(),\n    retry: false,\n  });\n\n  $: {\n    if (\n      !$queryUserInfo.isError &&\n      $queryUserInfo &&\n      $queryUserInfo.data !== undefined\n    ) {\n      userAddress = $queryUserInfo.data?.publicAddress;\n      link = `https://app.getnimbus.io/?invitation=${$queryUserInfo?.data.id}`;\n      qrcode.addData(link);\n      qrcode.make();\n      qrImageDataUrl = qrcode.createDataURL(6, 0);\n    }\n  }\n</script>\n\n<div class=\"flex flex-col justify-center items-center gap-3\">\n  <div class=\"text-base text-center\">\n    {$t(\"Track your portfolio and make wise decision\")}\n    {#if isNimbusVersion}{$t(\"at\")}\n      Nimbus{/if}\n  </div>\n  <div class=\"w-32 h-32\">\n    <img\n      src={qrImageDataUrl}\n      alt=\"Invite QR Code\"\n      class=\"w-full h-full block\"\n    />\n  </div>\n</div>\n\n<style></style>\n","<script lang=\"ts\">\n  import { createQueries, createQuery } from \"@tanstack/svelte-query\";\n  import { isDarkMode, chain, typeWallet } from \"~/store\";\n  import { t } from \"~/lib/i18n\";\n  import {\n    getTradingStats,\n    getHoldingToken,\n    handleValidateAddress,\n  } from \"~/lib/queryAPI\";\n  import { AnimateSharedLayout, Motion } from \"svelte-motion\";\n  import numeral from \"numeral\";\n  import {\n    autoFontSize,\n    formatPercent,\n    formatValue,\n    shorterName,\n  } from \"~/utils/index\";\n  import {\n    typeClosedHoldingTokenChart,\n    isNimbusVersion,\n  } from \"~/utils/constants\";\n  import dayjs from \"dayjs\";\n  import { chainList, chainMoveList, chainSolList } from \"~/lib/chains\";\n  import { flatten } from \"lodash\";\n\n  import Loading from \"~/components/Loading.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import EChart from \"~/components/EChart.svelte\";\n\n  import Logo from \"~/assets/logo-1.svg\";\n  import LogoWhite from \"~/assets/logo-white.svg\";\n  import TrendDown from \"~/assets/trend-down.svg\";\n  import TrendUp from \"~/assets/trend-up.svg\";\n  import defaultToken from \"~/assets/defaultToken.png\";\n\n  export let selectedAddress;\n  export let isSync = false;\n  export let enabledFetchAllData = false;\n\n  let closedHoldingPosition: any = [];\n  let selectedTypeChart: \"value\" | \"percent\" = \"value\";\n  let optionBarValue: any = {\n    tooltip: {\n      trigger: \"axis\",\n      extraCssText: \"z-index: 9997\",\n      axisPointer: {\n        type: \"shadow\",\n      },\n      formatter: function (params: any) {\n        const selectedItem = closedHoldingPosition.find(\n          (item: any) =>\n            item?.contractAddress?.toLowerCase() ===\n            params[0]?.name?.toLowerCase()\n        );\n        return `\n          <div style=\"display: flex; flex-direction: column; gap: 12px; min-width: 400px;\">\n            <div style=\"display: flex; align-items: centers; gap: 4px\">\n              <img src=${\n                selectedItem?.logo || defaultToken\n              } alt=\"\" width=20 height=20 style=\"border-radius: 100%\" />\n              <div style=\"margin-top: 2px; font-weight: 500; font-size: 16px; line-height: 19px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ${\n                  selectedItem?.name?.length > 20\n                    ? shorterName(selectedItem?.name, 20)\n                    : selectedItem?.name || \"N/A\"\n                } ${selectedItem?.symbol ? `(${selectedItem?.symbol})` : \"\"}\n              </div>\n            </div>\n            \n            <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n              <div style=\"font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ROI\n              </div>\n            \n              <div style=\"display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; gap: 4px; flex: 1; width: 100%; text-align: right; font-weight: 500; font-size: 14px; line-height: 17px;\">\n                <div style=\"display:flex; justify-content: flex-end; align-items: center; color: ${\n                  params[0].value >= 0 ? \"#05a878\" : \"#f25f5d\"\n                };\">\n                  <span>${params[0].value < 0 ? \"-\" : \"\"}</span>\n                  ${formatValue(Math.abs(params[0].value))}\n                </div>\n                <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; color: ${\n                  selectedItem?.percentPnL >= 0 ? \"#05a878\" : \"#f25f5d\"\n                };\">\n                  ${formatPercent(Math.abs(selectedItem?.percentPnL))}%\n                  <img src=${\n                    selectedItem?.percentPnL >= 0 ? TrendUp : TrendDown\n                  } alt=\"\" style=\"margin-bottom: 4px;\" />\n                </div>\n              </div>\n            </div>\n          </div>`;\n      },\n    },\n    toolbox: {\n      right: \"3%\",\n      top: \"-1%\",\n      feature: {\n        dataZoom: {\n          yAxisIndex: \"none\",\n        },\n      },\n    },\n    xAxis: {\n      type: \"category\",\n      axisTick: { show: false },\n      show: false,\n      data: [],\n      axisLabel: {\n        fontSize: autoFontSize(),\n      },\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: function (value: any, index: any) {\n          return (\n            `${value < 0 ? \"-\" : \"\"} $` +\n            numeral(Math.abs(value)).format(\"0.00a\")\n          );\n        },\n        fontSize: autoFontSize(),\n      },\n    },\n    series: [],\n  };\n  let optionBarPercent: any = {\n    tooltip: {\n      trigger: \"axis\",\n      extraCssText: \"z-index: 9997\",\n      axisPointer: {\n        type: \"shadow\",\n      },\n      formatter: function (params: any) {\n        const selectedItem = closedHoldingPosition.find(\n          (item: any) =>\n            item?.contractAddress?.toLowerCase() ===\n            params[0]?.name?.toLowerCase()\n        );\n        return `\n          <div style=\"display: flex; flex-direction: column; gap: 12px; min-width: 400px;\">\n            <div style=\"display: flex; align-items: centers; gap: 4px\">\n              <img src=${\n                selectedItem?.logo || defaultToken\n              } alt=\"\" width=20 height=20 style=\"border-radius: 100%\" />\n              <div style=\"margin-top: 2px; font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ${\n                  selectedItem?.name?.length > 20\n                    ? shorterName(selectedItem?.name, 20)\n                    : selectedItem?.name || \"N/A\"\n                } ${selectedItem?.symbol ? `(${selectedItem?.symbol})` : \"\"}\n              </div>\n            </div>\n            \n            <div style=\"display: flex; align-items: center; justify-content: space-between;\">\n              <div style=\"font-weight: 500; font-size: 14px; line-height: 17px; color: ${\n                $isDarkMode ? \"white\" : \"black\"\n              }\">\n                ROI\n              </div>\n              <div style=\"display: flex; flex-direction: column; justify-content: flex-end; align-items: flex-end; gap: 4px; flex: 1; width: 100%; text-align: right; font-weight: 500; font-size: 14px; line-height: 17px;\">\n                <div style=\"display:flex; justify-content: flex-end; align-items: center; color: ${\n                  selectedItem?.pnl >= 0 ? \"#05a878\" : \"#f25f5d\"\n                };\">\n                  <span>${selectedItem?.pnl < 0 ? \"-\" : \"\"}</span>\n                  ${formatValue(Math.abs(selectedItem?.pnl))}\n                </div>\n                <div style=\"display:flex; justify-content: flex-end; align-items: center; gap: 4px; color: ${\n                  params[0].value >= 0 ? \"#05a878\" : \"#f25f5d\"\n                };\">\n                  ${formatPercent(Math.abs(params[0].value))}%\n                  <img src=${\n                    params[0].value >= 0 ? TrendUp : TrendDown\n                  } alt=\"\" style=\"margin-bottom: 4px;\" />\n                </div>\n              </div>\n            </div>\n          </div>`;\n      },\n    },\n    toolbox: {\n      right: \"3%\",\n      top: \"-1%\",\n      feature: {\n        dataZoom: {\n          yAxisIndex: \"none\",\n        },\n      },\n    },\n    xAxis: {\n      type: \"category\",\n      axisTick: { show: false },\n      show: false,\n      data: [],\n      axisLabel: {\n        fontSize: autoFontSize(),\n      },\n    },\n    yAxis: {\n      type: \"value\",\n      axisLabel: {\n        formatter: \"{value}%\",\n        fontSize: autoFontSize(),\n      },\n    },\n    series: [],\n  };\n\n  $: isFetch = isSync ? enabledFetchAllData : true;\n\n  $: queryValidate = createQuery({\n    queryKey: [\"validate\", selectedAddress],\n    queryFn: () => handleValidateAddress(selectedAddress),\n    retry: false,\n    enabled: Boolean(selectedAddress && selectedAddress?.length !== 0),\n  });\n\n  $: chainListQueries =\n    $typeWallet?.length !== 0 && $typeWallet === \"EVM\"\n      ? chainList.slice(1)?.map((item) => item.value)\n      : $typeWallet?.length !== 0 && $typeWallet === \"MOVE\"\n        ? chainMoveList.slice(1)?.map((item) => item.value)\n        : $typeWallet?.length !== 0 && $typeWallet === \"SOL\"\n          ? chainSolList.slice(1)?.map((item) => item.value)\n          : [chainSolList[0]?.value];\n\n  $: queryTokenHolding = createQuery({\n    queryKey: [\"token-holding-each-chain\", selectedAddress, $chain],\n    queryFn: () =>\n      getHoldingToken(selectedAddress, $chain, $queryValidate.data),\n    enabled: Boolean(\n      selectedAddress?.length !== 0 &&\n        isFetch &&\n        !$queryValidate.isFetching &&\n        $chain.length !== 0 &&\n        $chain !== \"ALL\"\n    ),\n  });\n\n  $: queryAllTokenHolding = createQueries(\n    chainListQueries?.map((item: any) => {\n      return {\n        queryKey: [\"token-holding\", selectedAddress, $chain, item],\n        queryFn: () =>\n          getHoldingToken(selectedAddress, item, $queryValidate.data),\n        enabled: Boolean(\n          selectedAddress?.length !== 0 &&\n            isFetch &&\n            !$queryValidate.isFetching &&\n            $chain.length !== 0 &&\n            $chain === \"ALL\"\n        ),\n      };\n    })\n  );\n\n  const handleCalculateRealizedProfit = (data: any) => {\n    return {\n      realizedProfit: data?.profit?.realizedProfit\n        ? Number(data?.profit?.realizedProfit)\n        : 0,\n      percentRealizedProfit:\n        Number(data?.avgCost) === 0\n          ? 0\n          : (data?.profit?.realizedProfit\n              ? Number(data?.profit?.realizedProfit)\n              : 0) / Math.abs(Number(data?.avgCost)),\n    };\n  };\n\n  const handleCalculateUnrealizedProfit = (data: any) => {\n    const realizedProfit = data?.profit?.realizedProfit\n      ? Number(data?.profit?.realizedProfit)\n      : 0;\n\n    const pnl = data?.pnl\n      ? Number(data?.pnl)\n      : Number(data?.profit?.totalBought || 0) >\n          Number(data?.profit?.totalSold || 0)\n        ? Number(data?.profit?.totalBought || 0) * Number(data?.price || 0) +\n          Number(data?.profit?.totalGain || 0) -\n          Number(data?.profit?.cost || 0)\n        : realizedProfit;\n\n    return {\n      unrealizedProfit:\n        Number(data?.avgCost) === 0 ? 0 : Number(pnl) - realizedProfit,\n      percentUnrealizedProfit:\n        Number(data?.avgCost) === 0\n          ? 0\n          : (Number(data?.avgCost) === 0 ? 0 : Number(pnl) - realizedProfit) /\n            Math.abs(Number(data?.avgCost)),\n    };\n  };\n\n  const formatDataMetadata = (dataTokenHolding: any, dataTradingStats: any) => {\n    const formatMetaData = dataTradingStats.metadata.map((item: any) => {\n      const selectedHolding = dataTokenHolding.find(\n        (dataToken: any) =>\n          dataToken.contractAddress.toString().toLowerCase() ===\n          item.address.toString().toLowerCase()\n      );\n      if (selectedHolding) {\n        return {\n          ...item,\n          holding: selectedHolding,\n        };\n      }\n      return item;\n    });\n\n    const formatData = formatMetaData\n      ?.filter((item: any) => item.holding)\n      ?.filter(\n        (item: any) =>\n          dayjs().subtract(30, \"day\").valueOf() < item.lastTrade * 1000\n      )\n      ?.map((item: any) => {\n        return {\n          ...item.holding,\n          value:\n            Number(item?.holding?.amount || 0) *\n            Number(item?.holding.price?.price || item?.holding.rate),\n          price: Number(item?.holding?.price?.price || 0),\n        };\n      })\n      ?.sort((a: any, b: any) => {\n        if (a.value < b.value) {\n          return 1;\n        }\n        if (a.value > b.value) {\n          return -1;\n        }\n        return 0;\n      });\n\n    closedHoldingPosition = formatData\n      ?.filter((item: any) => item?.profit?.realizedProfit)\n      ?.map((item: any) => {\n        const realizedProfit =\n          handleCalculateRealizedProfit(item).realizedProfit;\n        const unrealizedProfit =\n          handleCalculateUnrealizedProfit(item).unrealizedProfit;\n\n        const pnl = realizedProfit + unrealizedProfit;\n\n        const percentPnL =\n          (handleCalculateRealizedProfit(item).percentRealizedProfit +\n            handleCalculateUnrealizedProfit(item).percentUnrealizedProfit) *\n          100;\n\n        return {\n          ...item,\n          pnl,\n          percentPnL,\n        };\n      });\n\n    if (closedHoldingPosition && closedHoldingPosition.length !== 0) {\n      optionBarValue = {\n        ...optionBarValue,\n        xAxis: {\n          ...optionBarValue.xAxis,\n          data: closedHoldingPosition\n            .sort((a: any, b: any) => a?.pnl - b?.pnl)\n            .map((item: any) => {\n              return item?.contractAddress?.toLowerCase();\n            }),\n        },\n        series: [\n          {\n            type: \"bar\",\n            data: closedHoldingPosition\n              .sort((a: any, b: any) => a?.pnl - b?.pnl)\n              .map((item: any) => {\n                return {\n                  value: item.pnl,\n                  itemStyle: {\n                    color: item.pnl >= 0 ? \"#05a878\" : \"#f25f5d\",\n                  },\n                };\n              }),\n          },\n        ],\n      };\n\n      optionBarPercent = {\n        ...optionBarPercent,\n        xAxis: {\n          ...optionBarPercent.xAxis,\n          data: closedHoldingPosition\n            .sort((a: any, b: any) => a?.percentPnL - b?.percentPnL)\n            .map((item: any) => {\n              return item?.contractAddress?.toLowerCase();\n            }),\n        },\n        series: [\n          {\n            type: \"bar\",\n            data: closedHoldingPosition\n              .sort((a: any, b: any) => a?.percentPnL - b?.percentPnL)\n              .map((item: any) => {\n                return {\n                  value: item.percentPnL,\n                  itemStyle: {\n                    color: item.percentPnL >= 0 ? \"#05a878\" : \"#f25f5d\",\n                  },\n                };\n              }),\n          },\n        ],\n      };\n    }\n  };\n\n  $: queryTradingStats = createQuery({\n    queryKey: [\"trading-stats\", selectedAddress],\n    queryFn: () => getTradingStats(selectedAddress),\n    retry: false,\n    enabled: selectedAddress?.length !== 0 && isFetch,\n  });\n\n  $: {\n    if (\n      !$queryTradingStats.isError &&\n      $queryTradingStats.data &&\n      $queryTradingStats.data !== undefined &&\n      $queryAllTokenHolding.length !== 0\n    ) {\n      const allTokens = flatten(\n        $queryAllTokenHolding\n          ?.filter((item) => Array.isArray(item.data))\n          ?.map((item) => item.data)\n      );\n      if (allTokens && allTokens.length !== 0) {\n        formatDataMetadata(allTokens, $queryTradingStats.data);\n      }\n    }\n  }\n\n  $: {\n    if (\n      !$queryTradingStats.isError &&\n      $queryTradingStats.data &&\n      $queryTradingStats.data !== undefined &&\n      !$queryTokenHolding.isError &&\n      $queryTokenHolding.data &&\n      $queryTokenHolding?.data !== undefined\n    ) {\n      formatDataMetadata($queryTokenHolding.data, $queryTradingStats.data);\n    }\n  }\n\n  $: theme = $isDarkMode ? \"dark\" : \"white\";\n</script>\n\n<div\n  class=\"col-span-4 xl:border border_0000001a rounded-xl flex flex-col gap-3 xl:p-6 py-3\"\n>\n  <div class=\"flex justify-start font-medium text-2xl\">\n    {$t(\"Positions 30D\")}\n  </div>\n\n  {#if $queryTradingStats.isFetching}\n    <div class=\"flex items-center justify-center flex-1\">\n      {#if isNimbusVersion}\n        <LoadingPremium />\n      {:else}\n        <Loading />\n      {/if}\n    </div>\n  {:else}\n    <div class=\"h-full relative\">\n      {#if $queryTradingStats.isError}\n        <div\n          class=\"h-full flex justify-center items-center text-base text-gray-400\"\n        >\n          {$t(\"Empty\")}\n        </div>\n      {:else}\n        <div class=\"h-full\">\n          {#if closedHoldingPosition && closedHoldingPosition.length !== 0}\n            <div class=\"flex flex-row\">\n              <AnimateSharedLayout>\n                {#each typeClosedHoldingTokenChart as type}\n                  <div\n                    class=\"relative cursor-pointer text-base font-medium py-1 px-3 rounded-[100px] transition-all\"\n                    on:click={() => (selectedTypeChart = type.value)}\n                  >\n                    <div\n                      class={`relative z-1 ${\n                        selectedTypeChart === type.value && \"text-white\"\n                      }`}\n                    >\n                      {$t(type.label)}\n                    </div>\n                    {#if type.value === selectedTypeChart}\n                      <Motion\n                        let:motion\n                        layoutId=\"active-pill\"\n                        transition={{ type: \"spring\", duration: 0.6 }}\n                      >\n                        <div\n                          class=\"absolute inset-0 rounded-full bg-[#1E96FC] z-0\"\n                          use:motion\n                        />\n                      </Motion>\n                    {/if}\n                  </div>\n                {/each}\n              </AnimateSharedLayout>\n            </div>\n          {/if}\n\n          {#if closedHoldingPosition && closedHoldingPosition.length === 0}\n            <div class=\"h-full flex items-center justify-center text-center\">\n              {$t(\n                \"There have been no closed holding positions in the last 30 day\"\n              )}\n            </div>\n          {:else}\n            <div class=\"relative pl-4\">\n              <EChart\n                id=\"closed-holding-token\"\n                {theme}\n                option={selectedTypeChart === \"value\"\n                  ? optionBarValue\n                  : optionBarPercent}\n                notMerge={true}\n                height={465}\n              />\n\n              {#if isNimbusVersion}\n                <div\n                  class=\"absolute transform -translate-x-1/2 -translate-y-1/2 opacity-50 pointer-events-none top-1/2 left-1/2\"\n                >\n                  <img\n                    src={$isDarkMode ? LogoWhite : Logo}\n                    alt=\"logo\"\n                    loading=\"lazy\"\n                    decoding=\"async\"\n                    width=\"140\"\n                    height=\"140\"\n                  />\n                </div>\n              {/if}\n            </div>\n          {/if}\n        </div>\n      {/if}\n    </div>\n  {/if}\n</div>\n\n<style>\n</style>\n","<script lang=\"ts\">\n  import { createQueries, createQuery } from \"@tanstack/svelte-query\";\n  import CopyToClipboard from \"svelte-copy-to-clipboard\";\n  import dayjs from \"dayjs\";\n  import { isDarkMode, typeWallet, chain, unrealizedProfit } from \"~/store\";\n  import { shorterAddress, shorterName, wait } from \"~/utils/index\";\n  import {\n    chainList,\n    chainMoveList,\n    chainSolList,\n    detectedChain,\n  } from \"~/lib/chains\";\n  import {\n    getTradingStats,\n    getHoldingToken,\n    handleValidateAddress,\n  } from \"~/lib/queryAPI\";\n  import { t } from \"~/lib/i18n\";\n  import { isNimbusVersion } from \"~/utils/constants\";\n  import { flatten } from \"lodash\";\n\n  import Loading from \"~/components/Loading.svelte\";\n  import Image from \"~/components/Image.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n  import OverlaySidebar from \"~/components/OverlaySidebar.svelte\";\n  import Tooltip from \"~/components/Tooltip.svelte\";\n  import TokenDetailSidebar from \"../TokenDetail/TokenDetailSidebar.svelte\";\n\n  import defaultToken from \"~/assets/defaultToken.png\";\n\n  export let selectedAddress;\n  export let isSync = false;\n  export let enabledFetchAllData = false;\n\n  let showSideTokenDetail = false;\n  let selectedTokenDetail: any;\n  let isShowTooltipContractAddress = false;\n  let isCopied = false;\n  let isShowTooltipSymbol = false;\n  let isShowTooltipName = false;\n\n  let topProfitToken: any = [];\n  let topLossToken: any = [];\n\n  $: isFetch = isSync ? enabledFetchAllData : true;\n\n  $: queryValidate = createQuery({\n    queryKey: [\"validate\", selectedAddress],\n    queryFn: () => handleValidateAddress(selectedAddress),\n    retry: false,\n    enabled: Boolean(selectedAddress && selectedAddress?.length !== 0),\n  });\n\n  $: chainListQueries =\n    $typeWallet?.length !== 0 && $typeWallet === \"EVM\"\n      ? chainList.slice(1)?.map((item) => item.value)\n      : $typeWallet?.length !== 0 && $typeWallet === \"MOVE\"\n        ? chainMoveList.slice(1)?.map((item) => item.value)\n        : $typeWallet?.length !== 0 && $typeWallet === \"SOL\"\n          ? chainSolList.slice(1)?.map((item) => item.value)\n          : [chainSolList[0]?.value];\n\n  $: queryTokenHolding = createQuery({\n    queryKey: [\"token-holding-each-chain\", selectedAddress, $chain],\n    queryFn: () =>\n      getHoldingToken(selectedAddress, $chain, $queryValidate.data),\n    enabled: Boolean(\n      selectedAddress?.length !== 0 &&\n        isFetch &&\n        !$queryValidate.isFetching &&\n        $chain.length !== 0 &&\n        $chain !== \"ALL\"\n    ),\n  });\n\n  $: queryAllTokenHolding = createQueries(\n    chainListQueries?.map((item: any) => {\n      return {\n        queryKey: [\"token-holding\", selectedAddress, $chain, item],\n        queryFn: () =>\n          getHoldingToken(selectedAddress, item, $queryValidate.data),\n        enabled: Boolean(\n          selectedAddress?.length !== 0 &&\n            isFetch &&\n            !$queryValidate.isFetching &&\n            $chain.length !== 0 &&\n            $chain === \"ALL\"\n        ),\n      };\n    })\n  );\n\n  $: queryTradingStats = createQuery({\n    queryKey: [\"trading-stats\", selectedAddress],\n    queryFn: () => getTradingStats(selectedAddress),\n    retry: false,\n    enabled: Boolean(selectedAddress?.length !== 0 && isFetch),\n  });\n\n  const handleCalculateRealizedProfit = (data: any) => {\n    return data?.profit?.realizedProfit\n      ? Number(data?.profit?.realizedProfit)\n      : 0;\n  };\n\n  const handleCalculateUnrealizedProfit = (data: any) => {\n    const realizedProfit = data?.profit?.realizedProfit\n      ? Number(data?.profit?.realizedProfit)\n      : 0;\n\n    const pnl = data?.pnl\n      ? Number(data?.pnl)\n      : Number(data?.profit?.totalBought || 0) >\n          Number(data?.profit?.totalSold || 0)\n        ? Number(data?.profit?.totalBought || 0) * Number(data?.price || 0) +\n          Number(data?.profit?.totalGain || 0) -\n          Number(data?.profit?.cost || 0)\n        : realizedProfit;\n\n    return Number(data?.avgCost) === 0 ? 0 : Number(pnl) - realizedProfit;\n  };\n\n  const formatDataTradingStats = (dataTokenHolding: any, data: any) => {\n    const formatMetaData = data.metadata?.map((item: any) => {\n      const selectedHolding = dataTokenHolding.find(\n        (dataToken: any) =>\n          dataToken.contractAddress.toString().toLowerCase() ===\n          item.address.toString().toLowerCase()\n      );\n      if (selectedHolding) {\n        return {\n          ...item,\n          holding: selectedHolding,\n        };\n      }\n      return item;\n    });\n\n    const formatData = formatMetaData\n      ?.filter((item: any) => item.holding)\n      ?.filter(\n        (item: any) =>\n          dayjs().subtract(30, \"day\").valueOf() < item.lastTrade * 1000\n      )\n      ?.map((item: any) => {\n        return {\n          ...item.holding,\n          profit: {\n            ...item.holding.profit,\n            // unrealizedProfit: item?.unrealizedProfit || 0, // TODO: Show only realized profit on this page\n          },\n          value:\n            Number(item?.holding?.amount || 0) *\n            Number(item?.holding?.price?.price || item?.holding?.rate),\n          price: Number(item?.holding?.price?.price || 0),\n        };\n      })\n      ?.sort((a: any, b: any) => {\n        if (a.value < b.value) {\n          return 1;\n        }\n        if (a.value > b.value) {\n          return -1;\n        }\n        return 0;\n      });\n\n    const dataNormalize = formatData\n      ?.filter((item: any) => item?.profit?.realizedProfit)\n      ?.map((item: any) => {\n        const realizedProfit = handleCalculateRealizedProfit(item);\n        const unrealizedProfit = handleCalculateUnrealizedProfit(item);\n        const pnl = realizedProfit + unrealizedProfit;\n\n        return {\n          ...item,\n          realizedProfit,\n          unrealizedProfit,\n          pnl,\n        };\n      });\n\n    topProfitToken = dataNormalize\n      ?.filter((item: any) => item.pnl >= 0)\n      ?.sort((a: any, b: any) => b.pnl - a.pnl);\n\n    topLossToken = dataNormalize\n      ?.filter((item: any) => item.pnl < 0)\n      ?.sort((a: any, b: any) => a.pnl - b.pnl);\n\n    // topProfitToken = listProfitToken.sort(\n    //   (a: any, b: any) => b.realizedProfit - a.realizedProfit,\n    // );\n\n    // topLossToken = listLossToken.sort(\n    //   (a: any, b: any) => a.realizedProfit - b.realizedProfit,\n    // );\n  };\n\n  $: {\n    if (\n      !$queryTradingStats.isError &&\n      $queryTradingStats.data &&\n      $queryTradingStats.data !== undefined &&\n      $queryAllTokenHolding.length !== 0\n    ) {\n      const allTokens = flatten(\n        $queryAllTokenHolding\n          ?.filter((item) => Array.isArray(item.data))\n          ?.map((item) => item.data)\n      );\n      if (allTokens && allTokens.length !== 0) {\n        formatDataTradingStats(allTokens, $queryTradingStats.data);\n      }\n    }\n  }\n\n  $: {\n    if (\n      !$queryTradingStats.isError &&\n      $queryTradingStats.data &&\n      $queryTradingStats.data !== undefined &&\n      !$queryTokenHolding.isError &&\n      $queryTokenHolding.data &&\n      $queryTokenHolding?.data !== undefined\n    ) {\n      formatDataTradingStats($queryTokenHolding?.data, $queryTradingStats.data);\n    }\n  }\n</script>\n\n<div class=\"col-span-4 grid xl:grid-cols-2 grid-cols-1 gap-5\">\n  <div\n    class=\"flex flex-col gap-5 xl:border border_0000001a rounded-xl xl:pt-6 xl:pb-2\"\n  >\n    <div class=\"text-xl font-medium lg:px-3\">{$t(\"Top Profit (30D)\")}</div>\n\n    <div\n      class={`max-h-[280px] ${$queryTradingStats.isFetching ? \"xl:h-[92px]\" : \"\"}`}\n    >\n      {#if $queryTradingStats.isFetching}\n        <div class=\"h-full flex justify-center items-center py-4\">\n          {#if isNimbusVersion}\n            <LoadingPremium />\n          {:else}\n            <Loading />\n          {/if}\n        </div>\n      {:else}\n        <div class=\"h-full overflow-y-auto\">\n          <div class=\"h-full flex flex-col\">\n            {#if topProfitToken.length === 0}\n              <div\n                class=\"h-full flex items-center justify-center text-center py-4 lg:px-3\"\n              >\n                {$t(\n                  \"There have been no closed holding positions in the last 30 day\"\n                )}\n              </div>\n            {:else}\n              {#each topProfitToken as item}\n                <div\n                  class={`flex items-center justify-between gap-2 py-2 lg:px-3 cursor-pointer ${\n                    $isDarkMode\n                      ? \"bg-[#131313] hover:bg-[#000]\"\n                      : \"bg-white hover:bg-gray-100\"\n                  }`}\n                  on:click={() => {\n                    showSideTokenDetail = true;\n                    selectedTokenDetail = item;\n                  }}\n                >\n                  <div class=\"flex-1 flex items-center gap-2\">\n                    <div class=\"w-[30px] h-[30px] overflow-hidden rounded-full\">\n                      <Image logo={item?.logo} defaultLogo={defaultToken} />\n                    </div>\n                    <span class=\"flex flex-col\">\n                      <span class=\"text-sm font-medium\">\n                        {item.name}\n                      </span>\n                      <span class=\"font-medium text_00000080 text-xs\">\n                        {#if item.symbol === undefined}\n                          N/A\n                        {:else}\n                          {shorterName(item.symbol, 20)}\n                        {/if}\n                      </span>\n                    </span>\n                  </div>\n                  <div class=\"text-[#00A878] text-sm font-medium\">\n                    <TooltipNumber number={item.pnl} type=\"value\" />\n                  </div>\n                </div>\n              {/each}\n            {/if}\n          </div>\n        </div>\n      {/if}\n    </div>\n  </div>\n\n  <div\n    class=\"flex flex-col gap-5 xl:border border_0000001a xl:rounded-xl xl:pt-6 xl:pb-2\"\n  >\n    <div class=\"text-xl font-medium lg:px-3\">{$t(\"Top Loss (30D)\")}</div>\n\n    <div\n      class={`max-h-[280px] ${$queryTradingStats.isFetching ? \"xl:h-[92px]\" : \"\"}`}\n    >\n      {#if $queryTradingStats.isLoading}\n        <div class=\"h-full flex justify-center items-center py-4\">\n          {#if isNimbusVersion}\n            <LoadingPremium />\n          {:else}\n            <Loading />\n          {/if}\n        </div>\n      {:else}\n        <div class=\"h-full overflow-y-auto\">\n          <div class=\"h-full flex flex-col\">\n            {#if topLossToken.length === 0}\n              <div\n                class=\"h-full flex items-center justify-center text-center py-4 lg:px-3\"\n              >\n                {$t(\n                  \"There have been no closed holding positions in the last 30 day\"\n                )}\n              </div>\n            {:else}\n              {#each topLossToken as item}\n                <div\n                  class={`flex items-center justify-between gap-2 py-2 lg:px-3 cursor-pointer ${\n                    $isDarkMode\n                      ? \"bg-[#131313] hover:bg-[#000]\"\n                      : \"bg-white hover:bg-gray-100\"\n                  }`}\n                  on:click={() => {\n                    showSideTokenDetail = true;\n                    selectedTokenDetail = item;\n                  }}\n                >\n                  <div class=\"flex-1 flex items-center gap-2\">\n                    <div class=\"w-[30px] h-[30px] overflow-hidden rounded-full\">\n                      <Image logo={item?.logo} defaultLogo={defaultToken} />\n                    </div>\n                    <span class=\"flex flex-col\">\n                      <span class=\"text-sm font-medium\">\n                        {item.name}\n                      </span>\n                      <span class=\"font-medium text_00000080 text-xs\">\n                        {#if item.symbol === undefined}\n                          N/A\n                        {:else}\n                          {shorterName(item.symbol, 20)}\n                        {/if}\n                      </span>\n                    </span>\n                  </div>\n                  <div class=\"text-red-500 text-sm font-medium\">\n                    <TooltipNumber number={item.pnl} type=\"value\" />\n                  </div>\n                </div>\n              {/each}\n            {/if}\n          </div>\n        </div>\n      {/if}\n    </div>\n  </div>\n</div>\n\n<!-- Sidebar Token Detail -->\n<OverlaySidebar isOpen={showSideTokenDetail}>\n  <div class=\"flex justify-between items-start\">\n    <div\n      class=\"text-5xl text-gray-500 cursor-pointer\"\n      on:click|stopPropagation={() => {\n        showSideTokenDetail = false;\n        selectedTokenDetail = {};\n      }}\n    >\n      &times;\n    </div>\n    {#if selectedTokenDetail && Object.keys(selectedTokenDetail).length !== 0}\n      <div class=\"flex flex-col gap-2\">\n        <div class=\"flex items-center gap-4\">\n          <div class=\"relative\">\n            <div class=\"rounded-full w-[46px] h-[46px] overflow-hidden\">\n              <Image\n                logo={selectedTokenDetail.logo}\n                defaultLogo={defaultToken}\n              />\n            </div>\n            {#if [\"EVM\", \"MOVE\", \"BUNDLE\"].includes($typeWallet) && selectedTokenDetail?.chain !== \"CEX\"}\n              <div class=\"absolute -top-2 -right-1\">\n                <img\n                  src={detectedChain(selectedTokenDetail?.chain)?.logo}\n                  alt=\"\"\n                  width=\"26\"\n                  height=\"26\"\n                  class=\"rounded-full block\"\n                />\n              </div>\n            {/if}\n          </div>\n          <div class=\"flex flex-col\">\n            <div class=\"flex items-start gap-2\">\n              <div\n                class=\"relative font-medium text-xl\"\n                on:mouseover={() => {\n                  isShowTooltipName = true;\n                }}\n                on:mouseleave={() => (isShowTooltipName = false)}\n              >\n                {#if selectedTokenDetail.name === undefined}\n                  N/A\n                {:else}\n                  {selectedTokenDetail?.name?.length > 20\n                    ? shorterName(selectedTokenDetail.name, 20)\n                    : selectedTokenDetail.name}\n                {/if}\n                {#if isShowTooltipName && selectedTokenDetail?.name?.length > 20}\n                  <div\n                    class=\"absolute left-0 -top-8\"\n                    style=\"z-index: 2147483648;\"\n                  >\n                    <Tooltip text={selectedTokenDetail.name} />\n                  </div>\n                {/if}\n              </div>\n            </div>\n\n            <div class=\"flex items-center gap-2\">\n              <div\n                class=\"relative font-medium text_00000080 text-base\"\n                on:mouseover={() => {\n                  isShowTooltipSymbol = true;\n                }}\n                on:mouseleave={() => (isShowTooltipSymbol = false)}\n              >\n                {#if selectedTokenDetail.symbol === undefined}\n                  N/A\n                {:else}\n                  {shorterName(selectedTokenDetail.symbol, 20)}\n                {/if}\n                {#if isShowTooltipSymbol && selectedTokenDetail.symbol.length > 20}\n                  <div\n                    class=\"absolute left-0 -top-8\"\n                    style=\"z-index: 2147483648;\"\n                  >\n                    <Tooltip text={selectedTokenDetail.symbol} />\n                  </div>\n                {/if}\n              </div>\n              <CopyToClipboard\n                text={selectedTokenDetail?.contractAddress}\n                let:copy\n                on:copy={async () => {\n                  isCopied = true;\n                  await wait(1000);\n                  isCopied = false;\n                }}\n              >\n                <div\n                  class=\"cursor-pointer relative\"\n                  on:mouseover={() => {\n                    isShowTooltipContractAddress = true;\n                  }}\n                  on:mouseleave={() => (isShowTooltipContractAddress = false)}\n                  on:click={copy}\n                >\n                  {#if isCopied}\n                    <svg\n                      width={20}\n                      height={20}\n                      id=\"Layer_1\"\n                      data-name=\"Layer 1\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 122.88 74.46\"\n                      fill={$isDarkMode ? \"#d1d5db\" : \"#00000080\"}\n                      ><path\n                        fill-rule=\"evenodd\"\n                        d=\"M1.87,47.2a6.33,6.33,0,1,1,8.92-9c8.88,8.85,17.53,17.66,26.53,26.45l-3.76,4.45-.35.37a6.33,6.33,0,0,1-8.95,0L1.87,47.2ZM30,43.55a6.33,6.33,0,1,1,8.82-9.07l25,24.38L111.64,2.29c5.37-6.35,15,1.84,9.66,8.18L69.07,72.22l-.3.33a6.33,6.33,0,0,1-8.95.12L30,43.55Zm28.76-4.21-.31.33-9.07-8.85L71.67,4.42c5.37-6.35,15,1.83,9.67,8.18L58.74,39.34Z\"\n                      /></svg\n                    >\n                  {:else}\n                    <svg\n                      width={20}\n                      height={20}\n                      viewBox=\"0 0 12 11\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M8.1875 3.3125H10.6875V10.1875H3.8125V7.6875\"\n                        stroke={$isDarkMode ? \"#d1d5db\" : \"#00000080\"}\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                      />\n                      <path\n                        d=\"M8.1875 0.8125H1.3125V7.6875H8.1875V0.8125Z\"\n                        stroke={$isDarkMode ? \"#d1d5db\" : \"#00000080\"}\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                      />\n                    </svg>\n                  {/if}\n\n                  {#if isShowTooltipContractAddress}\n                    <div\n                      class=\"absolute right-0 -top-8\"\n                      style=\"z-index: 2147483648;\"\n                    >\n                      <Tooltip\n                        text={shorterAddress(\n                          selectedTokenDetail?.contractAddress\n                        )}\n                      />\n                    </div>\n                  {/if}\n                </div>\n              </CopyToClipboard>\n            </div>\n          </div>\n        </div>\n        <div class=\"flex items-center font-medium text-2xl\">\n          $<TooltipNumber\n            number={Number(selectedTokenDetail?.price)}\n            type=\"balance\"\n          />\n        </div>\n      </div>\n    {/if}\n  </div>\n  <TokenDetailSidebar\n    data={{\n      ...selectedTokenDetail,\n      market_price: selectedTokenDetail?.price,\n    }}\n    {showSideTokenDetail}\n  />\n</OverlaySidebar>\n\n<style></style>\n","<script lang=\"ts\">\n  import { createQueries, createQuery } from \"@tanstack/svelte-query\";\n  import tooltip from \"~/lib/tooltip\";\n  import { t } from \"~/lib/i18n\";\n  import dayjs from \"dayjs\";\n  import { chain, typeWallet } from \"~/store\";\n  import {\n    getTradingStats,\n    getHoldingToken,\n    handleValidateAddress,\n  } from \"~/lib/queryAPI\";\n  import { isNimbusVersion } from \"~/utils/constants\";\n  import { chainList, chainMoveList, chainSolList } from \"~/lib/chains\";\n  import { flatten } from \"lodash\";\n\n  import Loading from \"~/components/Loading.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n\n  import TrendDown from \"~/assets/trend-down.svg\";\n  import TrendUp from \"~/assets/trend-up.svg\";\n\n  export let selectedAddress;\n  export let isSync = false;\n  export let enabledFetchAllData = false;\n\n  let balance = 0;\n  let unRealizedProfit = 0;\n  let fee = 0;\n  let set30DayPnl = 0;\n  let winRate = 0;\n  let totalCost = 0;\n  let totalToken = 0;\n  let realizedProfit = 0;\n  let badPerf = {};\n  let goodPerf = {};\n\n  $: isFetch = isSync ? enabledFetchAllData : true;\n\n  const formatDataHoldingToken = (dataTokenHolding: any) => {\n    const formatData = dataTokenHolding\n      .map((item: any) => {\n        return {\n          ...item,\n          value: Number(item?.amount) * Number(item?.price?.price),\n        };\n      })\n      .sort((a: any, b: any) => {\n        if (a.value < b.value) {\n          return 1;\n        }\n        if (a.value > b.value) {\n          return -1;\n        }\n        return 0;\n      });\n\n    balance = formatData.reduce((prev: any, item: any) => prev + item.value, 0);\n\n    const format30D = formatData\n      ?.filter((item: any) => item?.profit?.realizedProfit)\n      ?.map((item: any) => {\n        return {\n          ...item,\n          realizedProfit: item?.profit?.realizedProfit,\n          percentRealizedProfit:\n            (item?.avgCost || 0) === 0\n              ? 0\n              : (Number(item?.profit?.realizedProfit) /\n                  Number(Math.abs(item?.avgCost))) *\n                100,\n        };\n      });\n\n    winRate =\n      (format30D.filter((item: any) => item?.profit?.realizedProfit > 0)\n        .length /\n        format30D.length) *\n      100;\n\n    totalToken = format30D.length;\n  };\n\n  const formatDataTradingStats = (dataTokenHolding: any, data: any) => {\n    const formatMetaData = data.metadata.map((item: any) => {\n      const selectedHolding = dataTokenHolding.find(\n        (dataToken: any) =>\n          dataToken.contractAddress.toString().toLowerCase() ===\n          item.address.toString().toLowerCase(),\n      );\n      if (selectedHolding) {\n        return {\n          ...item,\n          holding: selectedHolding,\n        };\n      }\n      return item;\n    });\n\n    const formatData = formatMetaData\n      ?.filter((item: any) => item.holding)\n      ?.filter(\n        (item: any) =>\n          dayjs().subtract(30, \"day\").valueOf() < item.lastTrade * 1000,\n      )\n      .map((item: any) => {\n        return {\n          ...item.holding,\n          value:\n            Number(item?.holding?.amount || 0) *\n            Number(item?.holding?.price?.price || item?.holding?.rate),\n        };\n      })\n      .sort((a: any, b: any) => {\n        if (a.value < b.value) {\n          return 1;\n        }\n        if (a.value > b.value) {\n          return -1;\n        }\n        return 0;\n      });\n\n    const tradingStatsMeta = data?.metadata.filter(\n      (item: any) =>\n        dayjs().subtract(30, \"day\").valueOf() < item.lastTrade * 1000,\n    );\n\n    unRealizedProfit = tradingStatsMeta?.reduce(\n      (prev: any, item: any) => prev + Number(item.unrealizedProfit),\n      0,\n    );\n\n    fee = data.latestStats.fee;\n\n    realizedProfit = tradingStatsMeta.reduce(\n      (prev: any, item: any) => prev + Number(item.realizedProfit),\n      0,\n    );\n\n    totalCost = tradingStatsMeta?.reduce(\n      (prev: any, item: any) => prev + Number(item.cost),\n      0,\n    );\n\n    if (unRealizedProfit === 0 && realizedProfit === 0) {\n      set30DayPnl = 0;\n    } else {\n      set30DayPnl =\n        ((unRealizedProfit + realizedProfit - totalCost) / totalCost) * 100;\n    }\n\n    let listProfitToken: any = [];\n    let listLossToken: any = [];\n\n    formatData\n      ?.filter((item: any) => item?.profit?.realizedProfit)\n      ?.map((item: any) => {\n        return {\n          ...item,\n          realizedProfit: item?.profit?.realizedProfit,\n          percentRealizedProfit:\n            (item?.avgCost || 0) === 0\n              ? 0\n              : (Number(item?.profit?.realizedProfit) /\n                  Number(Math.abs(item?.avgCost))) *\n                100,\n        };\n      })\n      .map((item: any) => {\n        if (item.realizedProfit < 0) {\n          listLossToken.push(item);\n        } else {\n          listProfitToken.push(item);\n        }\n      });\n\n    goodPerf =\n      listProfitToken.sort(\n        (a: any, b: any) => b.realizedProfit - a.realizedProfit,\n      )[0] || {};\n\n    badPerf =\n      listLossToken.sort(\n        (a: any, b: any) => a.realizedProfit - b.realizedProfit,\n      )[0] || {};\n  };\n\n  $: queryValidate = createQuery({\n    queryKey: [\"validate\", selectedAddress],\n    queryFn: () => handleValidateAddress(selectedAddress),\n    retry: false,\n    enabled: Boolean(selectedAddress && selectedAddress?.length !== 0),\n  });\n\n  $: queryTradingStats = createQuery({\n    queryKey: [\"trading-stats\", selectedAddress],\n    queryFn: () => getTradingStats(selectedAddress),\n    retry: false,\n    enabled: selectedAddress?.length !== 0 && isFetch,\n  });\n\n  $: chainListQueries =\n    $typeWallet?.length !== 0 && $typeWallet === \"EVM\"\n      ? chainList.slice(1)?.map((item) => item.value)\n      : $typeWallet?.length !== 0 && $typeWallet === \"MOVE\"\n        ? chainMoveList.slice(1)?.map((item) => item.value)\n        : $typeWallet?.length !== 0 && $typeWallet === \"SOL\"\n          ? chainSolList.slice(1)?.map((item) => item.value)\n          : [chainSolList[0]?.value];\n\n  $: queryTokenHolding = createQuery({\n    queryKey: [\"token-holding-each-chain\", selectedAddress, $chain],\n    queryFn: () =>\n      getHoldingToken(selectedAddress, $chain, $queryValidate.data),\n    enabled: Boolean(\n      selectedAddress?.length !== 0 &&\n        isFetch &&\n        !$queryValidate.isFetching &&\n        $chain.length !== 0 &&\n        $chain !== \"ALL\",\n    ),\n  });\n\n  $: queryAllTokenHolding = createQueries(\n    chainListQueries?.map((item: any) => {\n      return {\n        queryKey: [\"token-holding\", selectedAddress, $chain, item],\n        queryFn: () =>\n          getHoldingToken(selectedAddress, item, $queryValidate.data),\n        enabled: Boolean(\n          selectedAddress?.length !== 0 &&\n            isFetch &&\n            !$queryValidate.isFetching &&\n            $chain.length !== 0 &&\n            $chain === \"ALL\",\n        ),\n      };\n    }),\n  );\n\n  $: {\n    if ($queryAllTokenHolding.length !== 0) {\n      const allTokens = flatten(\n        $queryAllTokenHolding\n          ?.filter((item) => Array.isArray(item.data))\n          ?.map((item) => item.data),\n      );\n      if (allTokens && allTokens.length !== 0) {\n        formatDataHoldingToken(allTokens);\n      }\n    }\n  }\n\n  $: {\n    if (\n      !$queryTokenHolding.isError &&\n      $queryTokenHolding.data &&\n      $queryTokenHolding?.data !== undefined\n    ) {\n      formatDataHoldingToken($queryTokenHolding.data);\n    }\n  }\n\n  $: {\n    if (\n      !$queryTradingStats.isError &&\n      $queryTradingStats.data &&\n      $queryTradingStats?.data !== undefined &&\n      !$queryTokenHolding.isError &&\n      $queryTokenHolding.data &&\n      $queryTokenHolding?.data !== undefined\n    ) {\n      formatDataTradingStats($queryTokenHolding?.data, $queryTradingStats.data);\n    }\n  }\n</script>\n\n<div\n  class=\"col-span-4 border border_0000001a rounded-xl xl:p-6 p-3 overflow-hidden\"\n>\n  {#if $queryTokenHolding.isFetching && $queryTradingStats.isFetching}\n    <div class=\"h-full flex items-center justify-center\">\n      {#if isNimbusVersion}\n        <LoadingPremium />\n      {:else}\n        <Loading />\n      {/if}\n    </div>\n  {:else}\n    <div class=\"flex flex-col gap-4\">\n      <div class=\"grid md:grid-cols-3 grid-cols-2 gap-5\">\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            {$t(\"Portfolio Value\")}\n          </div>\n          <div class=\"text-sm font-medium\">\n            <TooltipNumber number={balance} type=\"value\" personalValue />\n          </div>\n        </div>\n\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            <span\n              use:tooltip={{\n                content: `<tooltip-detail text=\"30D Unrealized PnL\" />`,\n                allowHTML: true,\n                placement: \"top\",\n                interactive: true,\n              }}\n            >\n              {$t(\"30D Unrealized PnL\")}\n            </span>\n          </div>\n          <div\n            class={`flex items-center text-sm font-medium ${\n              unRealizedProfit !== 0\n                ? unRealizedProfit >= 0\n                  ? \"text-[#00A878]\"\n                  : \"text-red-500\"\n                : \"\"\n            }`}\n          >\n            {#if unRealizedProfit < 0}-{/if}\n            <TooltipNumber\n              number={Math.abs(unRealizedProfit)}\n              type=\"value\"\n              personalValue\n            />\n          </div>\n        </div>\n\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            {$t(\"30D Realized PnL\")}\n          </div>\n          <div\n            class={`flex items-center text-sm font-medium ${\n              realizedProfit !== 0\n                ? realizedProfit >= 0\n                  ? \"text-[#00A878]\"\n                  : \"text-red-500\"\n                : \"\"\n            }`}\n          >\n            {#if realizedProfit < 0}-{/if}\n            <TooltipNumber\n              number={Math.abs(realizedProfit)}\n              type=\"value\"\n              personalValue\n            />\n          </div>\n        </div>\n\n        <!-- <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            30D PnL\n          </div>\n          <div\n            class={`flex items-center text-sm font-medium ${\n              set30DayPnl !== 0\n                ? set30DayPnl >= 0\n                  ? \"text-[#00A878]\"\n                  : \"text-red-500\"\n                : \"\"\n            }`}\n          >\n            {#if set30DayPnl < 0}-{/if}\n            <TooltipNumber\n              number={Math.abs(set30DayPnl)}\n              type={Math.abs(Number(set30DayPnl)) > 100 ? \"balance\" : \"percent\"}\n            />%\n          </div>\n        </div> -->\n\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            {$t(\"30D Trade Tokens\")}\n          </div>\n          <div class=\"text-sm font-medium\">\n            {totalToken}\n          </div>\n        </div>\n\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">{$t(\"Winrate\")}</div>\n          <div class=\"text-sm font-medium\">\n            <TooltipNumber number={winRate} type=\"percent\" personalValue />%\n          </div>\n        </div>\n\n        <div class=\"flex flex-col gap-2 justify-between\">\n          <div class=\"text-sm font-medium text_00000099\">\n            {$t(\"Total fee paid\")}\n          </div>\n          <div class=\"text-sm font-medium\">\n            <TooltipNumber number={fee} type=\"value\" personalValue />\n          </div>\n        </div>\n      </div>\n\n      <!-- {#if (goodPerf && Object.keys(goodPerf)?.length !== 0) || (badPerf && Object.keys(badPerf)?.length !== 0)}\n        <div class=\"grid grid-cols-2 gap-5\">\n          {#if goodPerf}\n            <div class=\"rounded-[20px] flex-1 bg_fafafbff px-4 pb-3 pt-5\">\n              <div class=\"text-sm font-medium text-[#6E7787FF] relative\">\n                <div\n                  class=\"border border-[#00A878] absolute -top-1 left-0 w-[40px]\"\n                />\n                Biggest win\n              </div>\n\n              {#if Object.keys(goodPerf).length !== 0}\n                <div class=\"text-2xl\">{goodPerf?.symbol}</div>\n\n                <div class=\"flex flex-col\">\n                  <div\n                    class={`flex text-lg ${\n                      0 >= 0 ? \"text-[#00A878]\" : \"text-red-500\"\n                    }`}\n                  >\n                    $<TooltipNumber\n                      number={Math.abs(goodPerf?.realizedProfit || 0)}\n                      type=\"balance\"\n                    />\n                  </div>\n                  <div class=\"flex items-center gap-1 text-lg\">\n                    <img\n                      src={goodPerf?.percentRealizedProfit >= 0\n                        ? TrendUp\n                        : TrendDown}\n                      alt=\"trend\"\n                      class=\"mb-1 block\"\n                    />\n                    <div\n                      class={`${\n                        goodPerf?.percentRealizedProfit >= 0\n                          ? \"text-[#00A878]\"\n                          : \"text-red-500\"\n                      }`}\n                    >\n                      <TooltipNumber\n                        number={Math.abs(goodPerf?.percentRealizedProfit || 0)}\n                        type=\"percent\"\n                      />\n                      %\n                    </div>\n                  </div>\n                </div>\n              {:else}\n                <div\n                  class=\"h-full flex justify-center items-center pb-8 text-sm font-medium\"\n                >\n                  There is no biggest win\n                </div>\n              {/if}\n            </div>\n          {/if}\n\n          {#if badPerf}\n            <div class=\"rounded-[20px] flex-1 bg_fafafbff px-4 pb-3 pt-5\">\n              <div class=\"text-sm font-medium text-[#6E7787FF] relative\">\n                <div\n                  class=\"border border-red-500 absolute -top-1 left-0 w-[40px]\"\n                />\n                Worse lose\n              </div>\n\n              {#if Object.keys(badPerf).length !== 0}\n                <div class=\"text-2xl\">{badPerf?.symbol}</div>\n\n                <div class=\"flex flex-col\">\n                  <div\n                    class={`flex text-lg ${\n                      badPerf?.realizedProfit >= 0\n                        ? \"text-[#00A878]\"\n                        : \"text-red-500\"\n                    }`}\n                  >\n                    $<TooltipNumber\n                      number={Math.abs(badPerf?.realizedProfit || 0)}\n                      type=\"balance\"\n                    />\n                  </div>\n                  <div class=\"flex items-center gap-1 text-lg\">\n                    <img\n                      src={badPerf?.percentRealizedProfit >= 0\n                        ? TrendUp\n                        : TrendDown}\n                      alt=\"trend\"\n                      class=\"mb-1 block\"\n                    />\n                    <div\n                      class={`${\n                        badPerf?.percentRealizedProfit >= 0\n                          ? \"text-[#00A878]\"\n                          : \"text-red-500\"\n                      }`}\n                    >\n                      <TooltipNumber\n                        number={Math.abs(badPerf?.percentRealizedProfit || 0)}\n                        type=\"percent\"\n                      />\n                      %\n                    </div>\n                  </div>\n                </div>\n              {:else}\n                <div\n                  class=\"h-full flex justify-center items-center pb-8 text-sm font-medium\"\n                >\n                  There is no worse lose\n                </div>\n              {/if}\n            </div>\n          {/if}\n        </div>\n      {/if} -->\n    </div>\n  {/if}\n</div>\n\n<style></style>\n","export default \"data:image/svg+xml,%3csvg%20width='12'%20height='12'%20viewBox='0%200%2012%2012'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M10%208.36365L6%204.00001L2%208.36365'%20stroke='white'%20stroke-width='2'%20stroke-linecap='round'%20stroke-linejoin='round'/%3e%3c/svg%3e\""],"file":"assets/up-arrow.js"}