{"version":3,"file":"index-BO-4Mtu6.js","sources":["../../node_modules/@wormhole-foundation/wormhole-connect/lib/index-BO-4Mtu6.mjs"],"sourcesContent":["var b = Object.defineProperty;\nvar v = (i, e, t) => e in i ? b(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;\nvar a = (i, e, t) => v(i, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { cA as f, cB as S, ae as I, r as p, cC as x, ah as w, bY as C, bB as E, bZ as m, u as o, cD as k, s as c, p as h, cE as F, c2 as _, h as U, b$ as $, m as T, bC as l, cF as W, bH as N } from \"./index-DgePBEwv.mjs\";\nimport { A as O } from \"./aptos-Bbj6gw3L.mjs\";\nclass Q {\n  constructor(e, t, s, r, n = !1) {\n    a(this, \"transaction\");\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"description\");\n    a(this, \"parallelizable\");\n    this.transaction = e, this.network = t, this.chain = s, this.description = r, this.parallelizable = n;\n  }\n}\nconst R = [\n  { name: \"tokenBridgeAddress\", ...f },\n  { name: \"chain\", ...S() },\n  {\n    name: \"domainSeparator\",\n    binary: \"bytes\",\n    custom: I.encode(p),\n    omit: !0\n  },\n  { name: \"tokenId\", ...f },\n  // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n  { name: \"domainSeparator\", binary: \"bytes\", custom: new Uint8Array([255]), omit: !0 }\n], P = (i) => x(R, i);\nclass d {\n  constructor(e, t, s, r) {\n    a(this, \"network\");\n    a(this, \"chain\");\n    a(this, \"connection\");\n    a(this, \"contracts\");\n    a(this, \"chainId\");\n    a(this, \"tokenBridgeAddress\");\n    this.network = e, this.chain = t, this.connection = s, this.contracts = r, this.chainId = w(t);\n    const n = r.tokenBridge;\n    if (!n)\n      throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n    this.tokenBridgeAddress = n;\n  }\n  static async fromRpc(e, t) {\n    const [s, r] = await O.chainFromRpc(e), n = t[r];\n    if (n.network !== s)\n      throw new Error(\"Network mismatch \" + n.network + \" !== \" + s);\n    return new d(s, r, e, n.contracts);\n  }\n  async isWrappedAsset(e) {\n    try {\n      return await this.getOriginalAsset(e), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getOriginalAsset(e) {\n    const t = e.toString().split(p);\n    let s;\n    if (s = (await this.connection.getAccountResource(t[0], `${this.tokenBridgeAddress}::state::OriginInfo`)).data, !s)\n      throw C;\n    const r = E(parseInt(s.token_chain.number)), n = new m(s.token_address.external_address);\n    return { chain: r, address: n };\n  }\n  async getTokenUniversalAddress(e) {\n    return new m(o.encode(k(e.toString()), !0));\n  }\n  async getTokenNativeAddress(e, t) {\n    const s = e === this.chain ? await this.getTypeFromExternalAddress(t.toString()) : await this.getAssetFullyQualifiedType({ chain: e, address: t });\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    return new c(s);\n  }\n  async hasWrappedAsset(e) {\n    try {\n      return await this.getWrappedAsset(e), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(e) {\n    if (h(e.address))\n      throw new Error(\"native asset cannot be a wrapped asset\");\n    const t = await this.getAssetFullyQualifiedType(e);\n    if (!t)\n      throw new Error(\"Invalid asset address.\");\n    return await this.connection.getAccountResource(F(t), `${this.tokenBridgeAddress}::state::OriginInfo`), _(this.chain, t);\n  }\n  async isTransferCompleted(e) {\n    const s = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data.consumed_vaas.elems.handle;\n    try {\n      return await this.connection.getTableItem(s, {\n        key_type: \"vector<u8>\",\n        value_type: \"u8\",\n        key: `0x${U.Buffer.from($(e.hash)).toString(\"hex\")}`\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getWrappedNative() {\n    return _(this.chain, T);\n  }\n  async *createAttestation(e, t) {\n    const s = { chain: this.chain, address: new c(e) }, r = await this.getAssetFullyQualifiedType(s);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n      type_arguments: [r],\n      arguments: []\n    }, \"Aptos.AttestToken\");\n  }\n  async *submitAttestation(e, t) {\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n      type_arguments: [],\n      arguments: [l(e)]\n    }, \"Aptos.CreateWrappedCoinType\");\n    const s = await this.getAssetFullyQualifiedType(e.payload.token);\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n      type_arguments: [s],\n      arguments: [l(e)]\n    }, \"Aptos.CreateWrappedCoin\");\n  }\n  async *transfer(e, t, s, r, n) {\n    const B = 0n, u = 0n, y = h(s) ? T : s.toString(), g = t.address.toUniversalAddress().toUint8Array(), A = w(t.chain);\n    n ? yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n      type_arguments: [y],\n      arguments: [r, A, g, u, n]\n    }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n      type_arguments: [y],\n      arguments: [r, A, g, B, u]\n    }, \"Aptos.TransferTokens\");\n  }\n  async *redeem(e, t, s = !0) {\n    const r = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n      type_arguments: [r],\n      arguments: [l(t)]\n    }, \"Aptos.CompleteTransfer\");\n  }\n  async getAssetFullyQualifiedType(e) {\n    return e.chain === this.chain ? W(e.address.toString()) ? e.address.toString() : null : `${d.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n  }\n  /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */\n  async getTypeFromExternalAddress(e) {\n    try {\n      const t = (await this.connection.getAccountResource(this.tokenBridgeAddress, `${this.tokenBridgeAddress}::state::State`)).data, { handle: s } = t.native_infos, r = await this.connection.getTableItem(s, {\n        key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n        value_type: \"0x1::type_info::TypeInfo\",\n        key: { hash: e }\n      });\n      return r ? [\n        r.account_address,\n        String.fromCharCode(...o.decode(r.module_name)),\n        String.fromCharCode(...o.decode(r.struct_name))\n      ].join(p) : null;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */\n  static getForeignAssetAddress(e, t, s) {\n    if (h(s.address))\n      throw new Error(\"Invalid token address\");\n    const r = P({\n      chain: s.chain,\n      tokenBridgeAddress: new c(t).toUniversalAddress(),\n      tokenId: s.address.toUniversalAddress()\n    });\n    return o.encode(k(r), !0);\n  }\n  createUnsignedTx(e, t, s = !1) {\n    return new Q(e, this.network, this.chain, t, s);\n  }\n}\nN(\"Aptos\", \"TokenBridge\", d);\nexport {\n  d as AptosTokenBridge\n};\n"],"names":["b","v","Q","r","n","R","f","S","I","p","P","x","w","O","C","E","m","o","k","c","h","F","_","s","U","$","T","l","B","u","y","g","W","N"],"mappings":"sPAAA,IAAIA,EAAI,OAAO,eACXC,EAAI,CAAC,EAAG,EAAG,IAAM,KAAK,EAAID,EAAE,EAAG,EAAG,CAAE,WAAY,GAAI,aAAc,GAAI,SAAU,GAAI,MAAO,EAAG,EAAI,EAAE,CAAC,EAAI,EACzG,EAAI,CAAC,EAAG,EAAG,IAAMC,EAAE,EAAG,OAAO,GAAK,SAAW,EAAI,GAAK,EAAG,CAAC,EAG9D,MAAMC,CAAE,CACN,YAAY,EAAG,EAAG,EAAGC,EAAGC,EAAI,GAAI,CAC9B,EAAE,KAAM,aAAa,EACrB,EAAE,KAAM,SAAS,EACjB,EAAE,KAAM,OAAO,EACf,EAAE,KAAM,aAAa,EACrB,EAAE,KAAM,gBAAgB,EACxB,KAAK,YAAc,EAAG,KAAK,QAAU,EAAG,KAAK,MAAQ,EAAG,KAAK,YAAcD,EAAG,KAAK,eAAiBC,CACxG,CACA,CACA,MAAMC,EAAI,CACR,CAAE,KAAM,qBAAsB,GAAGC,CAAG,EACpC,CAAE,KAAM,QAAS,GAAGC,GAAK,EACzB,CACE,KAAM,kBACN,OAAQ,QACR,OAAQC,EAAE,OAAOC,CAAC,EAClB,KAAM,EACP,EACD,CAAE,KAAM,UAAW,GAAGH,CAAG,EAEzB,CAAE,KAAM,kBAAmB,OAAQ,QAAS,OAAQ,IAAI,WAAW,CAAC,GAAG,CAAC,EAAG,KAAM,EAAE,CACrF,EAAGI,EAAK,GAAMC,EAAEN,EAAG,CAAC,EACpB,MAAM,CAAE,CACN,YAAY,EAAG,EAAG,EAAGF,EAAG,CACtB,EAAE,KAAM,SAAS,EACjB,EAAE,KAAM,OAAO,EACf,EAAE,KAAM,YAAY,EACpB,EAAE,KAAM,WAAW,EACnB,EAAE,KAAM,SAAS,EACjB,EAAE,KAAM,oBAAoB,EAC5B,KAAK,QAAU,EAAG,KAAK,MAAQ,EAAG,KAAK,WAAa,EAAG,KAAK,UAAYA,EAAG,KAAK,QAAUS,EAAE,CAAC,EAC7F,MAAMR,EAAID,EAAE,YACZ,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,0CAA0C,CAAC,YAAY,EACzE,KAAK,mBAAqBA,CAC9B,CACE,aAAa,QAAQ,EAAG,EAAG,CACzB,KAAM,CAAC,EAAGD,CAAC,EAAI,MAAMU,EAAE,aAAa,CAAC,EAAGT,EAAI,EAAED,CAAC,EAC/C,GAAIC,EAAE,UAAY,EAChB,MAAM,IAAI,MAAM,oBAAsBA,EAAE,QAAU,QAAU,CAAC,EAC/D,OAAO,IAAI,EAAE,EAAGD,EAAG,EAAGC,EAAE,SAAS,CACrC,CACE,MAAM,eAAe,EAAG,CACtB,GAAI,CACF,OAAO,MAAM,KAAK,iBAAiB,CAAC,EAAG,EAC7C,MAAY,CACN,MAAO,EACb,CACA,CACE,MAAM,iBAAiB,EAAG,CACxB,MAAM,EAAI,EAAE,SAAQ,EAAG,MAAMK,CAAC,EAC9B,IAAI,EACJ,GAAI,GAAK,MAAM,KAAK,WAAW,mBAAmB,EAAE,CAAC,EAAG,GAAG,KAAK,kBAAkB,qBAAqB,GAAG,KAAM,CAAC,EAC/G,MAAMK,EACR,MAAMX,EAAIY,EAAE,SAAS,EAAE,YAAY,MAAM,CAAC,EAAGX,EAAI,IAAIY,EAAE,EAAE,cAAc,gBAAgB,EACvF,MAAO,CAAE,MAAOb,EAAG,QAASC,CAAG,CACnC,CACE,MAAM,yBAAyB,EAAG,CAChC,OAAO,IAAIY,EAAEC,EAAE,OAAOC,EAAE,EAAE,SAAU,CAAA,EAAG,EAAE,CAAC,CAC9C,CACE,MAAM,sBAAsB,EAAG,EAAG,CAChC,MAAM,EAAI,IAAM,KAAK,MAAQ,MAAM,KAAK,2BAA2B,EAAE,SAAU,CAAA,EAAI,MAAM,KAAK,2BAA2B,CAAE,MAAO,EAAG,QAAS,EAAG,EACjJ,GAAI,CAAC,EACH,MAAM,IAAI,MAAM,wBAAwB,EAC1C,OAAO,IAAIC,EAAE,CAAC,CAClB,CACE,MAAM,gBAAgB,EAAG,CACvB,GAAI,CACF,OAAO,MAAM,KAAK,gBAAgB,CAAC,EAAG,EAC5C,MAAY,CACZ,CACI,MAAO,EACX,CACE,MAAM,gBAAgB,EAAG,CACvB,GAAIC,EAAE,EAAE,OAAO,EACb,MAAM,IAAI,MAAM,wCAAwC,EAC1D,MAAM,EAAI,MAAM,KAAK,2BAA2B,CAAC,EACjD,GAAI,CAAC,EACH,MAAM,IAAI,MAAM,wBAAwB,EAC1C,OAAO,MAAM,KAAK,WAAW,mBAAmBC,EAAE,CAAC,EAAG,GAAG,KAAK,kBAAkB,qBAAqB,EAAGC,EAAE,KAAK,MAAO,CAAC,CAC3H,CACE,MAAM,oBAAoB,EAAG,CAC3B,MAAMC,GAAK,MAAM,KAAK,WAAW,mBAAmB,KAAK,mBAAoB,GAAG,KAAK,kBAAkB,gBAAgB,GAAG,KAAK,cAAc,MAAM,OACnJ,GAAI,CACF,OAAO,MAAM,KAAK,WAAW,aAAaA,EAAG,CAC3C,SAAU,aACV,WAAY,KACZ,IAAK,KAAKC,EAAE,OAAO,KAAKC,EAAE,EAAE,IAAI,CAAC,EAAE,SAAS,KAAK,CAAC,EACnD,CAAA,EAAG,EACV,MAAY,CACN,MAAO,EACb,CACA,CACE,MAAM,kBAAmB,CACvB,OAAOH,EAAE,KAAK,MAAOI,CAAC,CAC1B,CACE,MAAO,kBAAkB,EAAG,EAAG,CAC7B,MAAM,EAAI,CAAE,MAAO,KAAK,MAAO,QAAS,IAAIP,EAAE,CAAC,CAAG,EAAEhB,EAAI,MAAM,KAAK,2BAA2B,CAAC,EAC/F,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,wBAAwB,EAC1C,MAAM,KAAK,iBAAiB,CAC1B,SAAU,GAAG,KAAK,kBAAkB,qCACpC,eAAgB,CAACA,CAAC,EAClB,UAAW,CAAA,CACZ,EAAE,mBAAmB,CAC1B,CACE,MAAO,kBAAkB,EAAG,EAAG,CAC7B,MAAM,KAAK,iBAAiB,CAC1B,SAAU,GAAG,KAAK,kBAAkB,sCACpC,eAAgB,CAAE,EAClB,UAAW,CAACwB,EAAE,CAAC,CAAC,CACjB,EAAE,6BAA6B,EAChC,MAAM,EAAI,MAAM,KAAK,2BAA2B,EAAE,QAAQ,KAAK,EAC/D,GAAI,CAAC,EACH,MAAM,IAAI,MAAM,wBAAwB,EAC1C,MAAM,KAAK,iBAAiB,CAC1B,SAAU,GAAG,KAAK,kBAAkB,iCACpC,eAAgB,CAAC,CAAC,EAClB,UAAW,CAACA,EAAE,CAAC,CAAC,CACjB,EAAE,yBAAyB,CAChC,CACE,MAAO,SAAS,EAAG,EAAG,EAAGxB,EAAGC,EAAG,CAC7B,MAAMwB,EAAI,GAAIC,EAAI,GAAIC,EAAIV,EAAE,CAAC,EAAIM,EAAI,EAAE,SAAU,EAAEK,EAAI,EAAE,QAAQ,mBAAoB,EAAC,aAAc,EAAE,EAAInB,EAAE,EAAE,KAAK,EACnHR,EAAI,MAAM,KAAK,iBAAiB,CAC9B,SAAU,GAAG,KAAK,kBAAkB,wDACpC,eAAgB,CAAC0B,CAAC,EAClB,UAAW,CAAC3B,EAAG,EAAG4B,EAAGF,EAAGzB,CAAC,CAC1B,EAAE,iCAAiC,EAAI,MAAM,KAAK,iBAAiB,CAClE,SAAU,GAAG,KAAK,kBAAkB,2CACpC,eAAgB,CAAC0B,CAAC,EAClB,UAAW,CAAC3B,EAAG,EAAG4B,EAAGH,EAAGC,CAAC,CAC1B,EAAE,sBAAsB,CAC7B,CACE,MAAO,OAAO,EAAG,EAAG,EAAI,GAAI,CAC1B,MAAM1B,EAAI,EAAE,QAAQ,MAAM,QAAU,KAAK,MAAQ,MAAM,KAAK,2BAA2B,EAAE,QAAQ,MAAM,QAAQ,UAAU,EAAI,MAAM,KAAK,2BAA2B,EAAE,QAAQ,KAAK,EAClL,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,wBAAwB,EAC1C,MAAM,KAAK,iBAAiB,CAC1B,SAAU,GAAG,KAAK,kBAAkB,qDACpC,eAAgB,CAACA,CAAC,EAClB,UAAW,CAACwB,EAAE,CAAC,CAAC,CACjB,EAAE,wBAAwB,CAC/B,CACE,MAAM,2BAA2B,EAAG,CAClC,OAAO,EAAE,QAAU,KAAK,MAAQK,EAAE,EAAE,QAAQ,UAAU,EAAI,EAAE,QAAQ,SAAU,EAAG,KAAO,GAAG,EAAE,uBAAuB,KAAK,MAAO,KAAK,mBAAoB,CAAC,CAAC,WAC/J,CAME,MAAM,2BAA2B,EAAG,CAClC,GAAI,CACF,MAAM,GAAK,MAAM,KAAK,WAAW,mBAAmB,KAAK,mBAAoB,GAAG,KAAK,kBAAkB,gBAAgB,GAAG,KAAM,CAAE,OAAQ,CAAC,EAAK,EAAE,aAAc7B,EAAI,MAAM,KAAK,WAAW,aAAa,EAAG,CACxM,SAAU,GAAG,KAAK,kBAAkB,0BACpC,WAAY,2BACZ,IAAK,CAAE,KAAM,CAAC,CACtB,CAAO,EACD,OAAOA,EAAI,CACTA,EAAE,gBACF,OAAO,aAAa,GAAGc,EAAE,OAAOd,EAAE,WAAW,CAAC,EAC9C,OAAO,aAAa,GAAGc,EAAE,OAAOd,EAAE,WAAW,CAAC,CACtD,EAAQ,KAAKM,CAAC,EAAI,IAClB,MAAY,CACN,OAAO,IACb,CACA,CAQE,OAAO,uBAAuB,EAAG,EAAG,EAAG,CACrC,GAAIW,EAAE,EAAE,OAAO,EACb,MAAM,IAAI,MAAM,uBAAuB,EACzC,MAAMjB,EAAIO,EAAE,CACV,MAAO,EAAE,MACT,mBAAoB,IAAIS,EAAE,CAAC,EAAE,mBAAoB,EACjD,QAAS,EAAE,QAAQ,mBAAkB,CAC3C,CAAK,EACD,OAAOF,EAAE,OAAOC,EAAEf,CAAC,EAAG,EAAE,CAC5B,CACE,iBAAiB,EAAG,EAAG,EAAI,GAAI,CAC7B,OAAO,IAAID,EAAE,EAAG,KAAK,QAAS,KAAK,MAAO,EAAG,CAAC,CAClD,CACA,CACA+B,EAAE,QAAS,cAAe,CAAC","x_google_ignoreList":[0]}