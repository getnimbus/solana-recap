{"version":3,"file":"ScallopLendingStake.js","sources":["../../src/UI/Portfolio/Defi/ScallopLendingStake.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { triggerBonusScore } from \"~/utils/functions\";\n  import { useQueryClient, QueryCache } from \"@tanstack/svelte-query\";\n  import { onMount } from \"svelte\";\n  import {\n    isDarkMode,\n    selectedTokenDetail,\n    showScallopDeFiFarmModal,\n    userPublicAddress,\n    wallet,\n    chain,\n    suiWalletInstance,\n    showModalBridge,\n  } from \"~/store\";\n  import mixpanel from \"mixpanel-browser\";\n  import { handleValidateAddress } from \"~/lib/queryAPI\";\n  import { createQuery } from \"@tanstack/svelte-query\";\n  import tooltip from \"~/lib/tooltip\";\n  import type { WalletState } from \"nimbus-sui-kit\";\n  import { SuiConnector } from \"nimbus-sui-kit\";\n  import { shorterAddress } from \"~/utils\";\n  import { nimbus } from \"~/lib/network\";\n  import {\n    ScallopBuilder,\n    ScallopQuery,\n    ScallopClient,\n  } from \"@scallop-io/sui-scallop-sdk\";\n  import { isNimbusVersion, SUIRPC } from \"~/utils/constants\";\n\n  import Loading from \"~/components/Loading.svelte\";\n  import ReactAdapter from \"~/components/ReactAdapter.svelte\";\n  import Button from \"~/components/Button.svelte\";\n  import TooltipNumber from \"~/components/TooltipNumber.svelte\";\n  import Image from \"~/components/Image.svelte\";\n  import LoadingPremium from \"~/components/LoadingPremium.svelte\";\n  import StatusModalUi from \"~/components/StatusModalUI.svelte\";\n\n  import defaultToken from \"~/assets/defaultToken.png\";\n\n  const queryCache = new QueryCache();\n  const queryClient = useQueryClient();\n\n  const chains = [\n    {\n      id: \"sui:mainnet\",\n      name: \"Mainnet\",\n      rpcUrl: SUIRPC,\n    },\n  ];\n\n  const onConnectSuccess = (msg) => {\n    console.log(\"Success connect: \", msg);\n    if ($suiWalletInstance) {\n      ($suiWalletInstance as WalletState).toggleSelect();\n    }\n  };\n\n  const onConnectError = (msg) => {\n    console.error(\"Error connect\", msg);\n    if ($suiWalletInstance) {\n      ($suiWalletInstance as WalletState).toggleSelect();\n    }\n  };\n\n  const widgetConfig = {\n    walletFn: (wallet) => {\n      if (\n        ($suiWalletInstance as WalletState) &&\n        ($suiWalletInstance as WalletState)?.connected\n      ) {\n        return;\n      }\n      suiWalletInstance.update((n) => (n = wallet));\n    },\n    onConnectSuccess,\n    onConnectError,\n  };\n\n  const scallopQuery = new ScallopQuery({\n    networkType: \"mainnet\",\n  });\n\n  const scallopClient = new ScallopClient({\n    networkType: \"mainnet\",\n  });\n\n  let isLoading = false;\n\n  let isTrigger = false;\n\n  let percent = 0;\n  let amount = \"\";\n\n  let checkStackSCoin = true;\n  let dataInfo = {};\n  let coinDecimal = 0;\n  let maxSuppliedCoin = 0;\n  let isLoadingDataInfo = false;\n\n  let statusData: any = {};\n\n  let publicAddress =\n    ($suiWalletInstance as WalletState) &&\n    ($suiWalletInstance as WalletState)?.connected\n      ? ($suiWalletInstance as WalletState)?.account?.address\n      : $userPublicAddress;\n\n  $: selectedTokenSymbol = $selectedTokenDetail?.symbol?.toLowerCase() || \"\";\n  $: selectedTokenPrice = $selectedTokenDetail?.market_price;\n  $: selectedTokenAmount = $selectedTokenDetail?.amount;\n\n  $: queryValidate = createQuery({\n    queryKey: [\"validate\", publicAddress],\n    queryFn: () => handleValidateAddress(publicAddress),\n    retry: false,\n  });\n\n  const initScallop = async () => {\n    await scallopQuery.init();\n    await scallopClient.init();\n  };\n\n  const getDataSupplied = async (address: any) => {\n    try {\n      await scallopQuery.init();\n      const res: any = await scallopQuery.getLendings(\n        [selectedTokenSymbol],\n        address,\n      );\n      if (res) {\n        coinDecimal = res[selectedTokenSymbol]?.coinDecimal || 0;\n        maxSuppliedCoin = res[selectedTokenSymbol]?.availableSupplyCoin || 0;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  $: {\n    if (!$queryValidate.isError && $queryValidate.data !== undefined) {\n      if ($queryValidate?.data?.type === \"MOVE\") {\n        getDataSupplied($queryValidate?.data.address);\n      }\n    }\n  }\n\n  const getDataFarmInfo = async () => {\n    try {\n      isLoadingDataInfo = true;\n      const res: any = await scallopClient.queryMarket();\n      if (res && res?.pools) {\n        dataInfo = res?.pools[selectedTokenSymbol];\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      isLoadingDataInfo = false;\n    }\n  };\n\n  onMount(() => {\n    initScallop();\n    getDataFarmInfo();\n  });\n\n  const getSync = async () => {\n    try {\n      const validateAccount = $queryValidate.data;\n      await nimbus.get(\n        `/v2/address/${$wallet}/sync?chain=${\n          validateAccount?.type === \"BUNDLE\" ? \"\" : validateAccount?.type\n        }`,\n      );\n    } catch (e) {\n      console.error(\"e: \", e);\n    }\n  };\n\n  const forceRefreshPosition = async (address: string) => {\n    try {\n      await nimbus\n        .get(\n          `/v2/address/${address}/positions?protocol=Scallop&force_refresh=${true}`,\n          {\n            headers: {\n              \"Cache-Control\": \"no-cache\",\n            },\n          },\n        )\n        .then((res) => res?.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const forceRefreshHoldingToken = async (address: any, chain: any) => {\n    try {\n      await nimbus.get(\n        `/v2/address/${address}/holding?chain=${chain}&force_refresh=${true}`,\n        {\n          headers: {\n            \"Cache-Control\": \"no-cache\",\n          },\n        },\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleSUIAuth = async () => {\n    mixpanel.track(\"user_login_sui\");\n    mixpanel.track(\"user_login_sui_Scallop_farm\");\n    try {\n      isTrigger = true;\n      ($suiWalletInstance as WalletState).toggleSelect();\n    } catch (e) {\n      console.log(\"error: \", e);\n    }\n  };\n\n  $: {\n    if (\n      ($suiWalletInstance as WalletState) &&\n      ($suiWalletInstance as WalletState).connected &&\n      isTrigger\n    ) {\n      if (($suiWalletInstance as WalletState)?.account?.address) {\n        publicAddress = (\n          $suiWalletInstance as WalletState\n        )?.account?.address?.toLowerCase();\n      } else {\n        if (\n          ($suiWalletInstance as WalletState) &&\n          ($suiWalletInstance as WalletState)?.connected\n        ) {\n          ($suiWalletInstance as WalletState).disconnect();\n        }\n        isTrigger = false;\n        publicAddress = $userPublicAddress;\n      }\n    }\n  }\n\n  $: {\n    if (percent) {\n      amount = (percent * Number(selectedTokenAmount)) / 100;\n    }\n  }\n\n  $: value = amount * Number(selectedTokenPrice) || 0;\n\n  const handleOnChainBonus = async (data: any) => {\n    try {\n      const response = await nimbus\n        .post(`/onchain/${publicAddress}/bonus?chain=SUI`, {\n          volume: data?.volume,\n          txHash: data?.txHash,\n          chain: $chain,\n          type: data?.type,\n        })\n        .then((res: any) => res.data);\n\n      if (response && response?.message === \"Claim bonus successfully\") {\n        queryClient?.invalidateQueries([$userPublicAddress, \"daily-checkin\"]);\n        triggerBonusScore(data?.volume * 5, 2000);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleSupply = async () => {\n    try {\n      const scallopBuilder = new ScallopBuilder({\n        walletAddress: publicAddress,\n        networkType: \"mainnet\",\n      });\n      await scallopBuilder.init();\n\n      mixpanel.track(`user_Supply_Scallop`, {\n        address: publicAddress,\n      });\n\n      // if (checkStackSCoin) {\n      //   handleSupplyLendingAndStake();\n      // } else {\n      //   handleSupplyLending();\n      // }\n\n      handleSupplyLending();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleSupplyLending = async () => {\n    isLoading = true;\n    try {\n      const obligationAddress =\n        await scallopQuery.getObligations(publicAddress);\n\n      const amountValue = percent === 100 ? maxSuppliedCoin : Number(amount);\n\n      let txBlock = null;\n\n      if (obligationAddress.length !== 0) {\n        const obligationId = obligationAddress[0].id;\n        txBlock = await scallopClient.depositCollateral(\n          selectedTokenSymbol,\n          Math.round(amountValue * 10 ** coinDecimal),\n          false,\n          obligationId,\n          publicAddress,\n        );\n      } else {\n        txBlock = await scallopClient.deposit(\n          selectedTokenSymbol,\n          Math.round(amountValue * 10 ** coinDecimal),\n          false,\n          publicAddress,\n        );\n      }\n\n      const res = await (\n        $suiWalletInstance as WalletState\n      ).signAndExecuteTransactionBlock({\n        transactionBlock: txBlock,\n        options: {\n          showInput: true,\n          showEffects: true,\n          showEvents: true,\n          showObjectChanges: true,\n          showBalanceChanges: true,\n        },\n      });\n\n      if (res && res?.digest) {\n        getDataSupplied(publicAddress);\n        getDataFarmInfo();\n\n        queryCache.clear();\n        getSync();\n        forceRefreshHoldingToken($wallet, $chain);\n        forceRefreshPosition($wallet);\n        queryClient?.refetchQueries([\"position-list\", $wallet]);\n        queryClient?.refetchQueries([\"positions\"]);\n        queryClient?.refetchQueries([\"position-history\"]);\n\n        // if ($chain !== \"ALL\") {\n        //   queryClient?.refetchQueries([\"token-holding-each-chain\"]);\n        // } else {\n        //   queryClient?.refetchQueries([\"token-holding\"]);\n        // }\n\n        queryClient?.refetchQueries([\"token-holding-each-chain\"]);\n        queryClient?.refetchQueries([\"token-holding\"]);\n\n        statusData = {\n          status: \"success\",\n          tx: res?.digest,\n          type: \"Lending\",\n        };\n\n        mixpanel.track(`user_Lending_Scallop`, {\n          address: publicAddress,\n          tx: res?.digest,\n          amount: Number(amountValue),\n          value: Number(amountValue) * Number(selectedTokenPrice),\n        });\n\n        handleOnChainBonus({\n          volume: Math.floor(Number(amountValue) * Number(selectedTokenPrice)),\n          txHash: res.digest,\n          chain: $chain,\n          type: \"lending\",\n        });\n      } else {\n        mixpanel.track(\"user_Lending_Scallop_fail\", {\n          res,\n        });\n        statusData = {\n          status: \"fail\",\n          type: \"Lending\",\n        };\n      }\n    } catch (e) {\n      console.error(e);\n      statusData = {\n        status: \"fail\",\n        type: \"Lending\",\n      };\n      mixpanel.track(\"user_Lending_Scallop_fail\", {\n        e,\n      });\n    } finally {\n      isLoading = false;\n    }\n  };\n\n  // const handleSupplyLendingAndStake = async () => {\n  //   isLoading = true;\n  //   try {\n  //     const sStakeCoin = \"s\" + selectedTokenSymbol;\n\n  //     const stakeAccountsData = await scallopClient.getStakeAccounts(\n  //       sStakeCoin,\n  //       publicAddress,\n  //     );\n\n  //     const amountValue = percent === 100 ? maxSuppliedCoin : Number(amount);\n\n  //     let txBlock = null;\n\n  //     if (stakeAccountsData.length !== 0) {\n  //       const stakeAccountId = stakeAccountsData[0].id;\n  //       txBlock = await scallopClient.depositAndStake(\n  //         selectedTokenSymbol,\n  //         Math.round(amountValue * 10 ** coinDecimal),\n  //         false,\n  //         stakeAccountId,\n  //         publicAddress,\n  //       );\n  //     } else {\n  //       const txBlockCreateStakeAccount =\n  //         await scallopClient.createStakeAccount(\n  //           sStakeCoin,\n  //           false,\n  //           publicAddress,\n  //         );\n  //       const res = await (\n  //         $suiWalletInstance as WalletState\n  //       ).signAndExecuteTransactionBlock({\n  //         transactionBlock: txBlockCreateStakeAccount,\n  //         options: {\n  //           showInput: true,\n  //           showEffects: true,\n  //           showEvents: true,\n  //           showObjectChanges: true,\n  //           showBalanceChanges: true,\n  //         },\n  //       });\n  //       if (res.digest) {\n  //         const stakeAccountsData = await scallopClient.getStakeAccounts(\n  //           sStakeCoin,\n  //           publicAddress,\n  //         );\n  //         if (stakeAccountsData.length !== 0) {\n  //           const stakeAccountId = stakeAccountsData[0].id;\n  //           txBlock = await scallopClient.depositAndStake(\n  //             sStakeCoin,\n  //             Math.round(amountValue * 10 ** coinDecimal),\n  //             false,\n  //             stakeAccountId,\n  //             publicAddress,\n  //           );\n  //         }\n  //       }\n  //     }\n\n  //     const res = await (\n  //       $suiWalletInstance as WalletState\n  //     ).signAndExecuteTransactionBlock({\n  //       transactionBlock: txBlock,\n  //       options: {\n  //         showInput: true,\n  //         showEffects: true,\n  //         showEvents: true,\n  //         showObjectChanges: true,\n  //         showBalanceChanges: true,\n  //       },\n  //     });\n\n  //     if (res && res?.digest) {\n  //       getDataSupplied(publicAddress);\n  //       getDataFarmInfo();\n\n  //       queryCache.clear();\n  //       getSync();\n  //       forceRefreshHoldingToken($wallet, $chain);\n  //       forceRefreshPosition($wallet);\n  //       queryClient.refetchQueries([\"positions\"]);\n  //       if ($chain !== \"ALL\") {\n  //         queryClient?.refetchQueries([\"token-holding-each-chain\"]);\n  //       } else {\n  //         queryClient.refetchQueries([\"token-holding\"]);\n  //       }\n  //       queryClient.refetchQueries([\"position-history\"]);\n\n  //       statusData = {\n  //         status: \"success\",\n  //         tx: res?.digest,\n  //         type: \"Stake\",\n  //       };\n\n  //       mixpanel.track(`user_Lending_Stake_Scallop`, {\n  //         address: publicAddress,\n  //         tx: res?.digest,\n  //         amount: Number(amountValue),\n  //         value: Number(amountValue) * Number(selectedTokenPrice),\n  //       });\n\n  //       handleOnChainBonus({\n  //         volume:\n  //           Math.floor(Number(amountValue) * Number(selectedTokenPrice)) * 2,\n  //         txHash: res.digest,\n  //         chain: $chain,\n  //         type: \"staking\",\n  //       });\n  //     } else {\n  //       mixpanel.track(\"user_Lending_Stake_Scallop_fail\", {\n  //         res,\n  //       });\n  //       statusData = {\n  //         status: \"fail\",\n  //         type: \"Stake\",\n  //       };\n  //     }\n  //   } catch (e) {\n  //     console.error(e);\n  //     mixpanel.track(\"user_Lending_Stake_Scallop_fail\", {\n  //       e,\n  //     });\n  //     statusData = {\n  //       status: \"fail\",\n  //       type: \"Stake\",\n  //     };\n  //   } finally {\n  //     isLoading = false;\n  //   }\n  // };\n\n  $: isEnable = Boolean(\n    $selectedTokenDetail &&\n      ($suiWalletInstance as WalletState) &&\n      ($suiWalletInstance as WalletState)?.connected &&\n      publicAddress === $wallet &&\n      $queryValidate?.data &&\n      $queryValidate?.data?.type === \"MOVE\",\n  );\n</script>\n\n{#if statusData && Object.keys(statusData).length !== 0}\n  <StatusModalUi\n    type={statusData?.status}\n    title={statusData?.status === \"success\" ? \"Success\" : \"Fail\"}\n  >\n    <span slot=\"msg\">\n      {#if statusData?.status === \"fail\"}\n        Something wrong when try to {statusData?.type}. Please try again!\n      {:else}\n        You have successfully <span class=\"font-medium\">{statusData?.type}</span\n        >\n        on <span class=\"font-medium\">Scallop</span> with tx\n        <span class=\"font-medium\">{shorterAddress(statusData?.tx)}</span>\n      {/if}\n    </span>\n  </StatusModalUi>\n{:else}\n  <div class=\"flex flex-col gap-4\">\n    <div class=\"font-medium text-2xl\">Lending on Scallop</div>\n\n    <div class=\"flex flex-col gap-1\">\n      <div class=\"flex justify-between\">\n        <div class=\"text-gray-500 text-sm px-1\">\n          <TooltipNumber\n            number={Number(selectedTokenAmount || 0)}\n            type=\"balance\"\n          />\n          {$selectedTokenDetail?.symbol} in wallet\n        </div>\n        <div\n          class=\"underline text-sm cursor-pointer hover:text-[#1e96fc] transition-all\"\n          on:click={() => showModalBridge.update((n) => (n = true))}\n        >\n          Bridge Tokens\n        </div>\n      </div>\n\n      <div\n        class=\"flex flex-col gap-3 border border_0000000d p-4 rounded-[10px]\"\n      >\n        <div class=\"flex items-start gap-4\">\n          <div class=\"rounded-full w-[46px] h-[46px] overflow-hidden\">\n            <Image\n              logo={$selectedTokenDetail?.logo}\n              defaultLogo={defaultToken}\n            />\n          </div>\n\n          <div class=\"flex-1 flex flex-col\">\n            <input\n              type=\"text\"\n              placeholder=\"0\"\n              autocomplete=\"off\"\n              inputmode=\"decimal\"\n              class=\"text-xl p-0 border-none focus:outline-none focus:ring-0 flex-1 bg-transparent\"\n              value={amount}\n              on:change={(event) => {\n                amount = event?.target?.value;\n                if (percent) {\n                  const amountWithPercent =\n                    (percent * Number(selectedTokenAmount)) / 100;\n\n                  if (amountWithPercent !== amount) {\n                    percent = 0;\n                  }\n                }\n              }}\n            />\n            <div class=\"text-gray-500 text-sm\">≈ ${value?.toFixed(4) || 0}</div>\n          </div>\n        </div>\n        <div class=\"flex items-center gap-4\">\n          <div\n            class={`cursor-pointer text-sm rounded-[10px] p-2 border ${percent === 25 ? \"border-[#1e96fc] text-[#1e96fc]\" : \"border_0000000d\"} ${$isDarkMode ? \"text-white\" : \"text-black\"}`}\n            on:click={() => {\n              if (percent === 25) {\n                percent = 0;\n              } else {\n                percent = 25;\n              }\n            }}\n          >\n            25%\n          </div>\n          <div\n            class={`cursor-pointer text-sm rounded-[10px] p-2 border ${percent === 50 ? \"border-[#1e96fc] text-[#1e96fc]\" : \"border_0000000d\"} ${$isDarkMode ? \"text-white\" : \"text-black\"}`}\n            on:click={() => {\n              if (percent === 50) {\n                percent = 0;\n              } else {\n                percent = 50;\n              }\n            }}\n          >\n            50%\n          </div>\n          <div\n            class={`cursor-pointer text-sm rounded-[10px] p-2 border ${percent === 75 ? \"border-[#1e96fc] text-[#1e96fc]\" : \"border_0000000d\"} ${$isDarkMode ? \"text-white\" : \"text-black\"}`}\n            on:click={() => {\n              if (percent === 75) {\n                percent = 0;\n              } else {\n                percent = 75;\n              }\n            }}\n          >\n            75%\n          </div>\n          <div\n            class={`cursor-pointer text-sm rounded-[10px] p-2 border ${percent === 100 ? \"border-[#1e96fc] text-[#1e96fc]\" : \"border_0000000d\"} ${$isDarkMode ? \"text-white\" : \"text-black\"}`}\n            on:click={() => {\n              if (percent === 100) {\n                percent = 0;\n              } else {\n                percent = 100;\n              }\n            }}\n          >\n            100%\n          </div>\n        </div>\n      </div>\n    </div>\n\n    {#if isLoadingDataInfo}\n      <div class=\"flex justify-center items-center\">\n        {#if isNimbusVersion}\n          <LoadingPremium />\n        {:else}\n          <Loading />\n        {/if}\n      </div>\n    {:else}\n      <div class=\"flex flex-col gap-2\">\n        <div class=\"flex justify-between items-center\">\n          <div class=\"text_00000099 text-sm\">Max Supply</div>\n          <div class=\"text-sm\">\n            <TooltipNumber\n              number={Number(selectedTokenAmount || 0)}\n              type=\"balance\"\n            />\n          </div>\n        </div>\n\n        <div class=\"flex justify-between items-center\">\n          <div class=\"text_00000099 text-sm\">Supply APR</div>\n          <div class=\"text-sm\">\n            <TooltipNumber\n              number={Number(dataInfo?.supplyApr || 0) * 100}\n              type=\"percent\"\n            />%\n          </div>\n        </div>\n\n        <div class=\"flex justify-between items-center\">\n          <div class=\"text_00000099 text-sm\">Market Price</div>\n          <div class=\"text-sm\">\n            <TooltipNumber number={selectedTokenPrice || 0} />\n          </div>\n        </div>\n      </div>\n    {/if}\n\n    <!-- {#if selectedTokenSymbol !== \"sca\"}\n      <div class=\"flex items-center justify-start gap-2 text-[#666666] mt-3\">\n        <label class=\"switch\" for=\"switch\">\n          <input\n            type=\"checkbox\"\n            bind:checked={checkStackSCoin}\n            class=\"cursor-pointer relative w-5 h-5 appearance-none rounded-[0.25rem] border outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca]\"\n          />\n          <span class=\"slider\" />\n        </label>\n        <div class=\"text-sm font-regular text-gray-500 mt-1\">\n          Stake s{$selectedTokenDetail?.symbol} into sCoin Pools\n        </div>\n      </div>\n    {/if} -->\n\n    <div class=\"flex justify-start gap-2\">\n      {#if !isEnable}\n        {#if publicAddress !== $wallet && $queryValidate?.data && $queryValidate?.data?.type === \"MOVE\"}\n          <div\n            use:tooltip={{\n              content: `<tooltip-detail text=\"Your connected wallet is not matches with selected wallet\" />`,\n              allowHTML: true,\n              placement: \"top\",\n              interactive: true,\n            }}\n            class=\"w-[120px]\"\n          >\n            <Button variant=\"disabled\" disabled>\n              <div class=\"text-white\">Supply</div>\n            </Button>\n          </div>\n        {:else}\n          <div class=\"w-[120px]\">\n            <Button variant=\"tertiary\" on:click={handleSUIAuth}>\n              <div class=\"text-white\">Connect SUI</div>\n            </Button>\n          </div>\n        {/if}\n      {:else}\n        <div class=\"w-[120px]\">\n          {#if Number(amount) > 0}\n            <Button\n              variant=\"tertiary\"\n              on:click={handleSupply}\n              {isLoading}\n              disabled={isLoading}\n            >\n              <div class=\"text-white\">Supply</div>\n            </Button>\n          {:else}\n            <div\n              use:tooltip={{\n                content: `<tooltip-detail text=\"Invalid amount!\" />`,\n                allowHTML: true,\n                placement: \"top\",\n                interactive: true,\n              }}\n            >\n              <Button variant=\"disabled\" disabled>\n                <div class=\"text-white\">Supply</div>\n              </Button>\n            </div>\n          {/if}\n        </div>\n      {/if}\n      <div class=\"w-[120px]\">\n        <Button\n          variant=\"secondary\"\n          on:click={() => {\n            showScallopDeFiFarmModal.update((n) => (n = false));\n          }}\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<ReactAdapter\n  element={SuiConnector}\n  config={widgetConfig}\n  autoConnect={false}\n  {chains}\n  integrator=\"svelte-example\"\n/>\n\n<style>\n</style>\n"],"names":["t3_value","ctx","t11_value","defaultToken","attr","div8","div8_class_value","null_to_empty","div9","div9_class_value","div10","div10_class_value","div11","div11_class_value","insert","target","div17","anchor","append","div0","div14","div3","div1","div2","div13","div7","div4","div6","input","div5","div12","div16","div15","current","dirty","set_data","t3","image_changes","t11","statusmodalui_changes","tooltipnumber1_changes","tooltipnumber2_changes","div","show_if","button","button_changes","t1_value","shorterAddress","span0","span1","span2","t1","t5","t5_value","create_if_block_1","span","SuiConnector","click_handler","showModalBridge","n","event","$$invalidate","amount","percent","selectedTokenAmount","showScallopDeFiFarmModal"],"mappings":"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"}