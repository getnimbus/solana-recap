import{dy as T,dz as _}from"./index.js";import{e as b}from"./index5.js";function k(n,i){for(var c=0;c<i.length;c++){const e=i[c];if(typeof e!="string"&&!Array.isArray(e)){for(const r in e)if(r!=="default"&&!(r in n)){const h=Object.getOwnPropertyDescriptor(e,r);h&&Object.defineProperty(n,r,h.get?h:{enumerable:!0,get:()=>e[r]})}}}return Object.freeze(Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}))}var m={},f={};const S=T(b);var l={};Object.defineProperty(l,"__esModule",{value:!0});l.numberToHex=l.getLowerCase=void 0;function v(n){return n&&n.toLowerCase()}l.getLowerCase=v;function y(n){return`0x${n.toString(16)}`}l.numberToHex=y;Object.defineProperty(f,"__esModule",{value:!0});f.SafeAppProvider=void 0;const g=S,H=_,o=l;class C extends H.EventEmitter{constructor(i,c){super(),this.submittedTxs=new Map,this.safe=i,this.sdk=c}async connect(){this.emit("connect",{chainId:this.chainId})}async disconnect(){}get chainId(){return this.safe.chainId}async request(i){const{method:c,params:e=[]}=i;switch(c){case"eth_accounts":return[this.safe.safeAddress];case"net_version":case"eth_chainId":return(0,o.numberToHex)(this.chainId);case"personal_sign":{const[s,t]=e;if(this.safe.safeAddress.toLowerCase()!==t.toLowerCase())throw new Error("The address or message hash is invalid");const a=await this.sdk.txs.signMessage(s);return("signature"in a?a.signature:void 0)||"0x"}case"eth_sign":{const[s,t]=e;if(this.safe.safeAddress.toLowerCase()!==s.toLowerCase()||!t.startsWith("0x"))throw new Error("The address or message hash is invalid");const a=await this.sdk.txs.signMessage(t);return("signature"in a?a.signature:void 0)||"0x"}case"eth_signTypedData":case"eth_signTypedData_v4":{const[s,t]=e,a=typeof t=="string"?JSON.parse(t):t;if(this.safe.safeAddress.toLowerCase()!==s.toLowerCase())throw new Error("The address is invalid");const d=await this.sdk.txs.signTypedMessage(a);return("signature"in d?d.signature:void 0)||"0x"}case"eth_sendTransaction":const r={...e[0],value:e[0].value||"0",data:e[0].data||"0x"};typeof r.gas=="string"&&r.gas.startsWith("0x")&&(r.gas=parseInt(r.gas,16));const h=await this.sdk.txs.send({txs:[r],params:{safeTxGas:r.gas}});return this.submittedTxs.set(h.safeTxHash,{from:this.safe.safeAddress,hash:h.safeTxHash,gas:0,gasPrice:"0x00",nonce:0,input:r.data,value:r.value,to:r.to,blockHash:null,blockNumber:null,transactionIndex:null}),h.safeTxHash;case"eth_blockNumber":return(await this.sdk.eth.getBlockByNumber(["latest"])).number;case"eth_getBalance":return this.sdk.eth.getBalance([(0,o.getLowerCase)(e[0]),e[1]]);case"eth_getCode":return this.sdk.eth.getCode([(0,o.getLowerCase)(e[0]),e[1]]);case"eth_getTransactionCount":return this.sdk.eth.getTransactionCount([(0,o.getLowerCase)(e[0]),e[1]]);case"eth_getStorageAt":return this.sdk.eth.getStorageAt([(0,o.getLowerCase)(e[0]),e[1],e[2]]);case"eth_getBlockByNumber":return this.sdk.eth.getBlockByNumber([e[0],e[1]]);case"eth_getBlockByHash":return this.sdk.eth.getBlockByHash([e[0],e[1]]);case"eth_getTransactionByHash":let u=e[0];try{u=(await this.sdk.txs.getBySafeTxHash(u)).txHash||u}catch{}return this.submittedTxs.has(u)?this.submittedTxs.get(u):this.sdk.eth.getTransactionByHash([u]).then(s=>(s&&(s.hash=e[0]),s));case"eth_getTransactionReceipt":{let s=e[0];try{s=(await this.sdk.txs.getBySafeTxHash(s)).txHash||s}catch{}return this.sdk.eth.getTransactionReceipt([s]).then(t=>(t&&(t.transactionHash=e[0]),t))}case"eth_estimateGas":return this.sdk.eth.getEstimateGas(e[0]);case"eth_call":return this.sdk.eth.call([e[0],e[1]]);case"eth_getLogs":return this.sdk.eth.getPastLogs([e[0]]);case"eth_gasPrice":return this.sdk.eth.getGasPrice();case"wallet_getPermissions":return this.sdk.wallet.getPermissions();case"wallet_requestPermissions":return this.sdk.wallet.requestPermissions(e[0]);case"safe_setSettings":return this.sdk.eth.setSafeSettings([e[0]]);case"wallet_sendCalls":{if(e[0].from!==this.safe.safeAddress)throw Error("Invalid from address");const s=e[0].calls.map((a,d)=>{if(a.chainId!==(0,o.numberToHex)(this.chainId))throw new Error(`Invalid call #${d}: Safe is not on chain ${a.chainId}`);if(!a.to)throw new Error(`Invalid call #${d}: missing "to" field`);return{to:a.to,data:a.data??"0x",value:a.value??(0,o.numberToHex)(0)}}),{safeTxHash:t}=await this.sdk.txs.send({txs:s});return t}case"wallet_getCallsStatus":{const s={[g.TransactionStatus.AWAITING_CONFIRMATIONS]:"PENDING",[g.TransactionStatus.AWAITING_EXECUTION]:"PENDING",[g.TransactionStatus.CANCELLED]:"CONFIRMED",[g.TransactionStatus.FAILED]:"CONFIRMED",[g.TransactionStatus.SUCCESS]:"CONFIRMED"},t=await this.sdk.txs.getBySafeTxHash(e[0]).catch(()=>null);if(!t?.txHash)throw new Error("Transaction not found");const a=await this.sdk.eth.getTransactionReceipt([t.txHash]).catch(()=>null);if(!a)throw new Error("Transaction receipt not found");const d=t.txData?.dataDecoded?.method!=="multiSend"?1:t.txData.dataDecoded.parameters?.[0].valueDecoded?.length??1,p=Number(a.blockNumber),x=Number(a.gasUsed),w=Array(d).fill({success:(0,o.numberToHex)(t.txStatus===g.TransactionStatus.SUCCESS?1:0),blockHash:a.blockHash,blockNumber:(0,o.numberToHex)(p),blockTimestamp:(0,o.numberToHex)(t.executedAt??0),gasUsed:(0,o.numberToHex)(x),transactionHash:t.txHash,logs:a.logs});return{status:s[t.txStatus],receipts:w}}case"wallet_showCallsStatus":throw new Error(`"${i.method}" not supported`);case"wallet_getCapabilities":return{[(0,o.numberToHex)(this.chainId)]:{atomicBatch:{supported:!0}}};default:throw Error(`"${i.method}" not implemented`)}}send(i,c){i||c("Undefined request"),this.request(i).then(e=>c(null,{jsonrpc:"2.0",id:i.id,result:e})).catch(e=>c(e,null))}}f.SafeAppProvider=C;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.SafeAppProvider=void 0;var i=f;Object.defineProperty(n,"SafeAppProvider",{enumerable:!0,get:function(){return i.SafeAppProvider}})})(m);const N=k({__proto__:null},[m]);export{N as i};
