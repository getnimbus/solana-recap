import{g as w,d as E,c as O,H as h}from"./App.js";import{d1 as m,d2 as y,d3 as l,d4 as g,d5 as b,d6 as x,d7 as R}from"./index.js";import"./index12.js";import"./index13.js";import"./browser-ponyfill.js";import"./duration.js";function M(a,e){if(!m(a,{strict:!1}))throw new y({address:a});if(!m(e,{strict:!1}))throw new y({address:e});return a.toLowerCase()===e.toLowerCase()}class S extends l{constructor({callbackSelector:e,cause:t,data:n,extraData:c,sender:i,urls:r}){super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],t.metaMessages?.length?"":[],"Offchain Gateway Call:",r&&["  Gateway URL(s):",...r.map(d=>`    ${w(d)}`)],`  Sender: ${i}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${c}`].flat(),name:"OffchainLookupError"})}}class $ extends l{constructor({result:e,url:t}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${w(t)}`,`Response: ${g(e)}`],name:"OffchainLookupResponseMalformedError"})}}class A extends l{constructor({sender:e,to:t}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${t}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const H="0x556f1830",C={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function U(a,{blockNumber:e,blockTag:t,data:n,to:c}){const{args:i}=E({data:n,abi:[C]}),[r,d,f,s,o]=i,{ccipRead:p}=a,k=p&&typeof p?.request=="function"?p.request:T;try{if(!M(c,r))throw new A({sender:r,to:c});const u=await k({data:f,sender:r,urls:d}),{data:L}=await O(a,{blockNumber:e,blockTag:t,data:b([s,x([{type:"bytes"},{type:"bytes"}],[u,o])]),to:c});return L}catch(u){throw new S({callbackSelector:s,cause:u,data:n,extraData:o,sender:r,urls:d})}}async function T({data:a,sender:e,urls:t}){let n=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const i=t[c],r=i.includes("{data}")?"GET":"POST",d=r==="POST"?{data:a,sender:e}:void 0,f=r==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(i.replace("{sender}",e).replace("{data}",a),{body:JSON.stringify(d),headers:f,method:r});let o;if(s.headers.get("Content-Type")?.startsWith("application/json")?o=(await s.json()).data:o=await s.text(),!s.ok){n=new h({body:d,details:o?.error?g(o.error):s.statusText,headers:s.headers,status:s.status,url:i});continue}if(!R(o)){n=new $({result:o,url:i});continue}return o}catch(s){n=new h({body:d,details:s.message,url:i})}}throw n}export{T as ccipRequest,U as offchainLookup,C as offchainLookupAbiItem,H as offchainLookupSignature};
